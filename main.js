/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var q=Object.defineProperty;var re=Object.getOwnPropertyDescriptor;var ce=Object.getOwnPropertyNames;var le=Object.prototype.hasOwnProperty;var Z=(d,l)=>()=>(l||d((l={exports:{}}).exports,l),l.exports),de=(d,l)=>{for(var e in l)q(d,e,{get:l[e],enumerable:!0})},ge=(d,l,e,t)=>{if(l&&typeof l=="object"||typeof l=="function")for(let s of ce(l))!le.call(d,s)&&s!==e&&q(d,s,{get:()=>l[s],enumerable:!(t=re(l,s))||t.enumerable});return d};var ue=d=>ge(q({},"__esModule",{value:!0}),d);var ee=Z($=>{$.Image={11:"ProcessingSoftware",254:"NewSubfileType",255:"SubfileType",256:"ImageWidth",257:"ImageLength",258:"BitsPerSample",259:"Compression",262:"PhotometricInterpretation",263:"Thresholding",264:"CellWidth",265:"CellLength",266:"FillOrder",269:"DocumentName",270:"ImageDescription",271:"Make",272:"Model",273:"StripOffsets",274:"Orientation",277:"SamplesPerPixel",278:"RowsPerStrip",279:"StripByteCounts",282:"XResolution",283:"YResolution",284:"PlanarConfiguration",285:"PageName",286:"XPosition",287:"YPosition",290:"GrayResponseUnit",291:"GrayResponseCurve",292:"T4Options",293:"T6Options",296:"ResolutionUnit",297:"PageNumber",301:"TransferFunction",305:"Software",306:"DateTime",315:"Artist",316:"HostComputer",317:"Predictor",318:"WhitePoint",319:"PrimaryChromaticities",320:"ColorMap",321:"HalftoneHints",322:"TileWidth",323:"TileLength",324:"TileOffsets",325:"TileByteCounts",330:"SubIFDs",332:"InkSet",333:"InkNames",334:"NumberOfInks",336:"DotRange",337:"TargetPrinter",338:"ExtraSamples",339:"SampleFormat",340:"SMinSampleValue",341:"SMaxSampleValue",342:"TransferRange",343:"ClipPath",344:"XClipPathUnits",345:"YClipPathUnits",346:"Indexed",347:"JPEGTables",351:"OPIProxy",512:"JPEGProc",513:"JPEGInterchangeFormat",514:"JPEGInterchangeFormatLength",515:"JPEGRestartInterval",517:"JPEGLosslessPredictors",518:"JPEGPointTransforms",519:"JPEGQTables",520:"JPEGDCTables",521:"JPEGACTables",529:"YCbCrCoefficients",530:"YCbCrSubSampling",531:"YCbCrPositioning",532:"ReferenceBlackWhite",700:"XMLPacket",18246:"Rating",18249:"RatingPercent",28722:"VignettingCorrParams",28725:"ChromaticAberrationCorrParams",28727:"DistortionCorrParams",32781:"ImageID",33421:"CFARepeatPatternDim",33422:"CFAPattern",33423:"BatteryLevel",33432:"Copyright",33434:"ExposureTime",33437:"FNumber",33723:"IPTCNAA",34377:"ImageResources",34665:"ExifTag",34675:"InterColorProfile",34850:"ExposureProgram",34852:"SpectralSensitivity",34853:"GPSTag",34855:"ISOSpeedRatings",34856:"OECF",34857:"Interlace",34858:"TimeZoneOffset",34859:"SelfTimerMode",36867:"DateTimeOriginal",37122:"CompressedBitsPerPixel",37377:"ShutterSpeedValue",37378:"ApertureValue",37379:"BrightnessValue",37380:"ExposureBiasValue",37381:"MaxApertureValue",37382:"SubjectDistance",37383:"MeteringMode",37384:"LightSource",37385:"Flash",37386:"FocalLength",37387:"FlashEnergy",37388:"SpatialFrequencyResponse",37389:"Noise",37390:"FocalPlaneXResolution",37391:"FocalPlaneYResolution",37392:"FocalPlaneResolutionUnit",37393:"ImageNumber",37394:"SecurityClassification",37395:"ImageHistory",37396:"SubjectLocation",37397:"ExposureIndex",37398:"TIFFEPStandardID",37399:"SensingMethod",40091:"XPTitle",40092:"XPComment",40093:"XPAuthor",40094:"XPKeywords",40095:"XPSubject",50341:"PrintImageMatching",50706:"DNGVersion",50707:"DNGBackwardVersion",50708:"UniqueCameraModel",50709:"LocalizedCameraModel",50710:"CFAPlaneColor",50711:"CFALayout",50712:"LinearizationTable",50713:"BlackLevelRepeatDim",50714:"BlackLevel",50715:"BlackLevelDeltaH",50716:"BlackLevelDeltaV",50717:"WhiteLevel",50718:"DefaultScale",50719:"DefaultCropOrigin",50720:"DefaultCropSize",50721:"ColorMatrix1",50722:"ColorMatrix2",50723:"CameraCalibration1",50724:"CameraCalibration2",50725:"ReductionMatrix1",50726:"ReductionMatrix2",50727:"AnalogBalance",50728:"AsShotNeutral",50729:"AsShotWhiteXY",50730:"BaselineExposure",50731:"BaselineNoise",50732:"BaselineSharpness",50733:"BayerGreenSplit",50734:"LinearResponseLimit",50735:"CameraSerialNumber",50736:"LensInfo",50737:"ChromaBlurRadius",50738:"AntiAliasStrength",50739:"ShadowScale",50740:"DNGPrivateData",50741:"MakerNoteSafety",50778:"CalibrationIlluminant1",50779:"CalibrationIlluminant2",50780:"BestQualityScale",50781:"RawDataUniqueID",50827:"OriginalRawFileName",50828:"OriginalRawFileData",50829:"ActiveArea",50830:"MaskedAreas",50831:"AsShotICCProfile",50832:"AsShotPreProfileMatrix",50833:"CurrentICCProfile",50834:"CurrentPreProfileMatrix",50879:"ColorimetricReference",50931:"CameraCalibrationSignature",50932:"ProfileCalibrationSignature",50933:"ExtraCameraProfiles",50934:"AsShotProfileName",50935:"NoiseReductionApplied",50936:"ProfileName",50937:"ProfileHueSatMapDims",50938:"ProfileHueSatMapData1",50939:"ProfileHueSatMapData2",50940:"ProfileToneCurve",50941:"ProfileEmbedPolicy",50942:"ProfileCopyright",50964:"ForwardMatrix1",50965:"ForwardMatrix2",50966:"PreviewApplicationName",50967:"PreviewApplicationVersion",50968:"PreviewSettingsName",50969:"PreviewSettingsDigest",50970:"PreviewColorSpace",50971:"PreviewDateTime",50972:"RawImageDigest",50973:"OriginalRawFileDigest",50974:"SubTileBlockSize",50975:"RowInterleaveFactor",50981:"ProfileLookTableDims",50982:"ProfileLookTableData",51008:"OpcodeList1",51009:"OpcodeList2",51022:"OpcodeList3",51041:"NoiseProfile",51043:"TimeCodes",51044:"FrameRate",51058:"TStop",51081:"ReelName",51105:"CameraLabel",51089:"OriginalDefaultFinalSize",51090:"OriginalBestQualityFinalSize",51091:"OriginalDefaultCropSize",51107:"ProfileHueSatMapEncoding",51108:"ProfileLookTableEncoding",51109:"BaselineExposureOffset",51110:"DefaultBlackRender",51111:"NewRawImageDigest",51112:"RawToPreviewGain",51125:"DefaultUserCrop",51177:"DepthFormat",51178:"DepthNear",51179:"DepthFar",51180:"DepthUnits",51181:"DepthMeasureType",51182:"EnhanceParams",52525:"ProfileGainTableMap",52526:"SemanticName",52528:"SemanticInstanceID",52529:"CalibrationIlluminant3",52530:"CameraCalibration3",52531:"ColorMatrix3",52532:"ForwardMatrix3",52533:"IlluminantData1",52534:"IlluminantData2",52535:"IlluminantData3",52536:"MaskSubArea",52537:"ProfileHueSatMapData3",52538:"ReductionMatrix3",52539:"RGBTables"};$.Photo={33434:"ExposureTime",33437:"FNumber",34850:"ExposureProgram",34852:"SpectralSensitivity",34855:"ISOSpeedRatings",34856:"OECF",34864:"SensitivityType",34865:"StandardOutputSensitivity",34866:"RecommendedExposureIndex",34867:"ISOSpeed",34868:"ISOSpeedLatitudeyyy",34869:"ISOSpeedLatitudezzz",36864:"ExifVersion",36867:"DateTimeOriginal",36868:"DateTimeDigitized",36880:"OffsetTime",36881:"OffsetTimeOriginal",36882:"OffsetTimeDigitized",37121:"ComponentsConfiguration",37122:"CompressedBitsPerPixel",37377:"ShutterSpeedValue",37378:"ApertureValue",37379:"BrightnessValue",37380:"ExposureBiasValue",37381:"MaxApertureValue",37382:"SubjectDistance",37383:"MeteringMode",37384:"LightSource",37385:"Flash",37386:"FocalLength",37396:"SubjectArea",37500:"MakerNote",37510:"UserComment",37520:"SubSecTime",37521:"SubSecTimeOriginal",37522:"SubSecTimeDigitized",37888:"Temperature",37889:"Humidity",37890:"Pressure",37891:"WaterDepth",37892:"Acceleration",37893:"CameraElevationAngle",40960:"FlashpixVersion",40961:"ColorSpace",40962:"PixelXDimension",40963:"PixelYDimension",40964:"RelatedSoundFile",40965:"InteroperabilityTag",41483:"FlashEnergy",41484:"SpatialFrequencyResponse",41486:"FocalPlaneXResolution",41487:"FocalPlaneYResolution",41488:"FocalPlaneResolutionUnit",41492:"SubjectLocation",41493:"ExposureIndex",41495:"SensingMethod",41728:"FileSource",41729:"SceneType",41730:"CFAPattern",41985:"CustomRendered",41986:"ExposureMode",41987:"WhiteBalance",41988:"DigitalZoomRatio",41989:"FocalLengthIn35mmFilm",41990:"SceneCaptureType",41991:"GainControl",41992:"Contrast",41993:"Saturation",41994:"Sharpness",41995:"DeviceSettingDescription",41996:"SubjectDistanceRange",42016:"ImageUniqueID",42032:"CameraOwnerName",42033:"BodySerialNumber",42034:"LensSpecification",42035:"LensMake",42036:"LensModel",42037:"LensSerialNumber",42080:"CompositeImage",42081:"SourceImageNumberOfCompositeImage",42082:"SourceExposureTimesOfCompositeImage",42240:"Gamma"};$.Iop={1:"InteroperabilityIndex",2:"InteroperabilityVersion",4096:"RelatedImageFileFormat",4097:"RelatedImageWidth",4098:"RelatedImageLength"};$.GPSInfo={0:"GPSVersionID",1:"GPSLatitudeRef",2:"GPSLatitude",3:"GPSLongitudeRef",4:"GPSLongitude",5:"GPSAltitudeRef",6:"GPSAltitude",7:"GPSTimeStamp",8:"GPSSatellites",9:"GPSStatus",10:"GPSMeasureMode",11:"GPSDOP",12:"GPSSpeedRef",13:"GPSSpeed",14:"GPSTrackRef",15:"GPSTrack",16:"GPSImgDirectionRef",17:"GPSImgDirection",18:"GPSMapDatum",19:"GPSDestLatitudeRef",20:"GPSDestLatitude",21:"GPSDestLongitudeRef",22:"GPSDestLongitude",23:"GPSDestBearingRef",24:"GPSDestBearing",25:"GPSDestDistanceRef",26:"GPSDestDistance",27:"GPSProcessingMethod",28:"GPSAreaInformation",29:"GPSDateStamp",30:"GPSDifferential",31:"GPSHPositioningError"}});var ne=Z((De,ie)=>{var G=ee();ie.exports=function(d){var l=0;if(d.toString("ascii",0,3)!=="MM\0"&&d.toString("ascii",0,3)!=="II*"&&(l=6,d.toString("ascii",0,5)!=="Exif\0"))throw new Error('Invalid EXIF data: buffer should start with "Exif", "MM" or "II".');var e=null;if(d[l]===73&&d[l+1]===73)e=!1;else if(d[l]===77&&d[l+1]===77)e=!0;else throw new Error("Invalid EXIF data: expected byte order marker.");if(d.length<l+4||F(d,l+2,e)!==42)throw new Error("Invalid EXIF data: expected 0x002A.");if(d.length<=l+8)throw new Error("Invalid EXIF data: Ends before ifdOffset");var t=M(d,l+4,e)+l;if(t<8)throw new Error("Invalid EXIF data: ifdOffset < 8");var s={bigEndian:e};if(s.Image=R(d,t,e,G.Image,l),d.length>=t+2){var a=F(d,t,e);d.length>=t+2+a*12+4&&(t=M(d,t+2+a*12,e),t!==0&&(s.Thumbnail=R(d,t+l,e,G.Image,l)))}return s.Image&&(j(s.Image.ExifTag)&&(s.Photo=R(d,s.Image.ExifTag+l,e,G.Photo,l)),j(s.Image.GPSTag)&&(s.GPSInfo=R(d,s.Image.GPSTag+l,e,G.GPSInfo,l))),s.Photo&&j(s.Photo.InteroperabilityTag)&&(s.Iop=R(d,s.Photo.InteroperabilityTag+l,e,G.Iop,l)),s};var pe={DateTimeOriginal:!0,DateTimeDigitized:!0,DateTime:!0};function R(d,l,e,t,s){if(d.length<l+2)return null;var a=F(d,l,e);l+=2;for(var i={},n=0;n<a;n++){if(d.length>=l+2)var o=F(d,l,e);else return null;l+=2;var r=t[o]||o,c=he(d,l,e,s);r in pe&&(c=me(c)),i[r]=c,l+=10}return i}var te=[1,1,2,4,8,1,1,2,4,8];function he(d,l,e,t){if(d.length<l+7)return null;var s=F(d,l,e);if(!s||s>te.length)return null;var a=M(d,l+2,e),i=te[s-1],n;if(i*a<=4)n=l+6;else if(d.length>=l+10)n=M(d,l+6,e)+t;else return null;if(s===2){var o=d.slice(n,n+a);if(o.some(g=>g>>7>0))return o;var r=o.toString("ascii");return r[r.length-1]==="\0"&&(r=r.slice(0,-1)),r}if(s===7)return d.slice(n,n+a);if(a===1)return se(d,n,e,s);for(var c=[],u=0;u<a&&n<d.length;u++)c.push(se(d,n,e,s)),n+=i;return c}function se(d,l,e,t){switch(t){case 1:return d.length<l+1?null:d[l];case 3:return d.length<l+2?null:F(d,l,e);case 4:return d.length<l+4?null:M(d,l,e);case 5:return d.length<l+8?null:M(d,l,e)/M(d,l+4,e);case 6:return d.length<l+1?null:d.readInt8(l);case 8:return d.length<l+2?null:xe(d,l,e);case 9:return d.length<l+4?null:_(d,l,e);case 10:return d.length<l+8?null:_(d,l,e)/_(d,l+4,e)}}function me(d){if(typeof d!="string")return null;var l=d.match(/^(\d{4}):(\d{2}):(\d{2}) (\d{2}):(\d{2}):(\d{2})$/);return l?new Date(Date.UTC(l[1],l[2]-1,l[3],l[4],l[5],l[6],0)):null}function j(d){return typeof d=="number"&&Math.floor(d)===d&&d>0}function F(d,l,e){return e?d.readUInt16BE(l):d.readUInt16LE(l)}function M(d,l,e){return e?d.readUInt32BE(l):d.readUInt32LE(l)}function xe(d,l,e){return e?d.readInt16BE(l):d.readInt16LE(l)}function _(d,l,e){return e?d.readInt32BE(l):d.readInt32LE(l)}});var ke={};de(ke,{GeminiChatView:()=>V,default:()=>U});module.exports=ue(ke);var h=require("obsidian"),fe=ne();function ye(d){let l="",e=new Uint8Array(d),t=e.byteLength;for(let s=0;s<t;s++)l+=String.fromCharCode(e[s]);return window.btoa(l)}var O="gemini-chat-view",ae=[{keyword:"Research",action:"research",requiresList:!0,enabled:!0},{keyword:"Expand",action:"expand",requiresList:!1,enabled:!0},{keyword:"Summarize",action:"summarize",requiresList:!1,enabled:!0},{keyword:"Summarise",action:"summarize",requiresList:!1,enabled:!0},{keyword:"Actions",action:"actions",requiresList:!1,enabled:!0},{keyword:"Tasks",action:"tasks",requiresList:!0,enabled:!0},{keyword:"Analyze",action:"analyze",requiresList:!1,enabled:!0},{keyword:"Analyse",action:"analyze",requiresList:!1,enabled:!0},{keyword:"Define",action:"define",requiresList:!0,enabled:!0},{keyword:"Translate",action:"translate",requiresList:!1,enabled:!0},{keyword:"Rewrite",action:"rewrite",requiresList:!1,enabled:!0},{keyword:"Questions",action:"questions",requiresList:!1,enabled:!0},{keyword:"Connect",action:"connect",requiresList:!1,enabled:!0},{keyword:"Organise",action:"organize",requiresList:!1,enabled:!0},{keyword:"Organize",action:"organize",requiresList:!1,enabled:!0},{keyword:"TagLinks",action:"taglinks",requiresList:!1,enabled:!0},{keyword:"Related",action:"related",requiresList:!1,enabled:!0}],K=`You are an expert note-processing assistant integrated into Obsidian. I am providing you with an image of a handwritten note. 
Perform the following tasks and format your response *exactly* as specified below, using Markdown. 
Do not include any other text, headers, or pleasantries in your response.

IMPORTANT: When transcribing, preserve formatting indicators:
- If a word appears underlined in the handwriting, format it as <u>word</u>
- Maintain numbered or bulleted lists exactly as they appear
- Keep the exact structure and organization of the original note

### Transcript
[Provide a full, verbatim transcript of the text in the image here, preserving all formatting indicators as specified above.]

### Summary
[Provide a concise bullet-point summary of the key points.]

### Tasks
[Extract any actionable tasks or to-do items from the note. Format each as a checkbox item using "- [ ]" followed by the task description. 
Include any time indicators mentioned with the task:
- If a due date is mentioned (e.g., "by Friday", "due tomorrow", "by tonight", "before June 1"), include it as "DUE: [date]"
- If a scheduled/planned date is mentioned (e.g., "scheduled for Monday", "on the 15th"), include it as "SCHEDULED: [date]"
- If a start date is mentioned (e.g., "start next week", "begin in January"), include it as "START: [date]"
- If priority is indicated (!, !!, !!!), include it at the beginning
Example format: "- [ ] !!! Task description DUE: tomorrow SCHEDULED: Monday"
If no tasks are found, write "None identified."]

### Detected Tags
[Identify any hashtags (e.g., #idea, #meeting) in the text. List them here as a comma-separated list, without the '#' symbol. For example: idea, meeting, project-alpha. If none are found, write "None identified."]`,we={geminiApiKey:"",selectedModel:"gemini-2.5-flash",customTags:"sketchnote, from-notebook",enableDeepResearch:!1,newNoteLocation:"Gemini Scans/YYYY",attachmentLocation:"Gemini Scans/YYYY/Attachments",enableLocationTagging:!1,fallbackToCurrentLocation:!1,enableTriggerWords:!1,researchResponseLength:"moderate",triggerActions:ae,notebooks:[],currentNotebookId:"",autoIncrementPage:!0,insertPageNumbers:!0,groupByNotebook:!0,notebookFolderPattern:"Notebooks/{notebook}",androidCameraMode:"ask",enableTasksIntegration:!1,tasksNotePath:"Tasks/Inbox.md",tasksSectionHeading:"## Captured Tasks",taskPriorities:!0,defaultTaskTags:"#captured",geminiPrompt:K,enableDiscussionLinks:!0,discussionLinkText:"\u{1F4AC} Discuss this note with Gemini"},V=class extends h.ItemView{constructor(e,t){super(e);this.plugin=t,this.noteContent="",this.sourceFile=null}getViewType(){return O}getDisplayText(){return"Gemini Chat"}getIcon(){return"message-circle"}async onOpen(){let e=this.containerEl.children[1];if(!(e instanceof HTMLElement)){console.error("Container element is not an HTMLElement");return}let t=e;t.empty(),t.addClass("gemini-chat-view"),this.createChatInterface(t);let s=this.app.workspace.getActiveFile();s&&await this.loadNote(s)}createChatInterface(e){e.style.cssText=`
            display: flex;
            flex-direction: column;
            height: 100%;
        `;let t=e.createDiv({cls:"gemini-chat-header"});t.style.cssText=`
            padding: 10px;
            border-bottom: 1px solid var(--background-modifier-border);
            background: var(--background-secondary);
            flex-shrink: 0;
        `;let s=t.createEl("h4",{text:"Chat with Gemini"});s.style.cssText="margin: 0; font-size: 14px;",this.sourceFileDisplay=t.createEl("div",{cls:"source-file",text:"No note loaded"}),this.sourceFileDisplay.style.cssText=`
            font-size: 11px;
            color: var(--text-muted);
            margin-top: 4px;
        `,this.chatContainer=e.createDiv({cls:"gemini-chat-messages"}),this.chatContainer.style.cssText=`
            flex: 1;
            overflow-y: auto;
            padding: 15px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        `;let a=e.createDiv({cls:"gemini-chat-input"});a.style.cssText=`
            padding: 10px;
            border-top: 1px solid var(--background-modifier-border);
            background: var(--background-primary);
            flex-shrink: 0;
        `;let i=a.createDiv({cls:"quick-actions"});i.style.cssText=`
            display: flex;
            gap: 5px;
            margin-bottom: 8px;
            flex-wrap: wrap;
        `,[{icon:"\u{1F4A1}",text:"Elaborate",prompt:"Can you elaborate on the main points?"},{icon:"\u2753",text:"Questions",prompt:"What questions should I be asking?"},{icon:"\u{1F517}",text:"Related",prompt:"What related topics should I explore?"}].forEach(({icon:r,text:c,prompt:u})=>{let g=i.createEl("button",{text:`${r} ${c}`,cls:"clickable-icon"});g.style.cssText="font-size: 11px; padding: 3px 6px;",g.onclick=()=>{this.inputField.value=u,this.sendMessage()}});let o=a.createDiv({cls:"input-container"});o.style.cssText="display: flex; gap: 8px;",this.inputField=o.createEl("textarea",{cls:"gemini-input",attr:{placeholder:"Ask Gemini about this note...",rows:"2"}}),this.inputField.style.cssText=`
            flex: 1;
            resize: none;
            padding: 8px;
            border-radius: 6px;
            border: 1px solid var(--background-modifier-border);
            font-size: 14px;
        `,this.sendButton=o.createEl("button",{cls:"mod-cta",text:"\u27A4"}),this.sendButton.style.cssText=`
            width: 40px;
            height: 40px;
            border-radius: 50%;
            align-self: flex-end;
        `,this.sendButton.onclick=()=>this.sendMessage(),this.inputField.addEventListener("keydown",r=>{r.key==="Enter"&&!r.shiftKey&&(r.preventDefault(),this.sendMessage())}),this.inputField.addEventListener("input",()=>{this.inputField.style.height="auto",this.inputField.style.height=Math.min(this.inputField.scrollHeight,120)+"px"})}async loadNote(e){this.sourceFile=e,this.noteContent=await this.app.vault.read(e),this.sourceFileDisplay.setText(`Discussing: ${e.basename}`),this.chatContainer.empty();let t=await this.getDiscussionPath(e),s=this.app.vault.getAbstractFileByPath(t);if(s instanceof h.TFile){let a=await this.app.vault.read(s),i=this.parseDiscussionHistory(a);i.forEach(n=>{this.addMessage(n.question,"user"),this.addMessage(n.response,"assistant")}),i.length>0&&this.addDivider("Previous discussion loaded")}this.chatContainer.children.length===0&&this.addMessage(`I'm ready to discuss "${e.basename}". What would you like to know?`,"assistant")}async sendMessage(){let e=this.inputField.value.trim();if(!e||!this.sourceFile)return;this.inputField.disabled=!0,this.sendButton.disabled=!0,this.addMessage(e,"user"),this.inputField.value="",this.inputField.style.height="auto";let t=this.addMessage("Thinking...","assistant");t.style.opacity="0.6";try{let s=await this.plugin.discussWithGemini(this.noteContent,e);if(this.chatContainer.removeChild(t),this.addMessage(s,"assistant"),this.sourceFile){let a=await this.getDiscussionPath(this.sourceFile);await this.plugin.appendToDiscussionFile(a,e,s,this.sourceFile)}}catch(s){this.chatContainer.removeChild(t),this.addMessage("Failed to get response. Please try again.","error"),console.error("Gemini chat error:",s)}finally{this.inputField.disabled=!1,this.sendButton.disabled=!1,this.inputField.focus()}}addMessage(e,t){let s=this.chatContainer.createDiv({cls:`gemini-message gemini-message-${t}`}),a=`
            padding: 10px 14px;
            border-radius: 12px;
            max-width: 85%;
            word-wrap: break-word;
        `;return t==="user"?s.style.cssText=a+`
                background: var(--interactive-accent);
                color: var(--text-on-accent);
                align-self: flex-end;
                margin-left: auto;
            `:t==="assistant"?s.style.cssText=a+`
                background: var(--background-secondary);
                align-self: flex-start;
            `:s.style.cssText=a+`
                background: var(--background-modifier-error);
                align-self: center;
            `,h.MarkdownRenderer.renderMarkdown(e,s,"",this.plugin),this.chatContainer.scrollTop=this.chatContainer.scrollHeight,s}addDivider(e){let t=this.chatContainer.createDiv({cls:"chat-divider"});t.style.cssText=`
            text-align: center;
            color: var(--text-muted);
            font-size: 11px;
            margin: 10px 0;
            position: relative;
        `,t.setText(e)}async getDiscussionPath(e){var a;let t=((a=e.parent)==null?void 0:a.path)||"",s=`${e.basename} - Discussion.md`;return t?`${t}/${s}`:s}parseDiscussionHistory(e){let t=[],s=/## Discussion Entry - .*?\n\n\*\*Question:\*\* (.*?)\n\n\*\*Gemini's Response:\*\*\n([\s\S]*?)(?=\n---\n|$)/g,a;for(;(a=s.exec(e))!==null;)t.push({question:a[1],response:a[2].trim()});return t}async onClose(){}},U=class extends h.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new X(this.app,this)),this.registerView(O,e=>new V(e,this)),this.addRibbonIcon("camera","Create note from camera or file",()=>{this.createNoteFromImageCapture()}),this.addCommand({id:"open-gemini-chat",name:"Open Gemini Chat",callback:()=>this.activateChatView()}),this.registerObsidianProtocolHandler("gemini-discuss",async e=>{let t=decodeURIComponent(e.file),s=this.app.vault.getAbstractFileByPath(t);if(s instanceof h.TFile){await this.activateChatView();let a=this.getChatView();a&&await a.loadNote(s)}}),this.addCommand({id:"discuss-with-gemini",name:"Discuss current note with Gemini",editorCallback:async e=>{let t=this.app.workspace.getActiveFile();if(t){await this.activateChatView();let s=this.getChatView();s&&await s.loadNote(t)}}}),this.registerEvent(this.app.workspace.on("active-leaf-change",async e=>{let t=this.getChatView();if(t&&(e==null?void 0:e.view)instanceof h.MarkdownView){let s=e.view.file;s&&await t.loadNote(s)}})),this.registerEvent(this.app.workspace.on("file-menu",(e,t)=>{!(t instanceof h.TFile)||!t.path.match(/\.(png|jpg|jpeg|gif)$/i)||e.addItem(s=>{s.setTitle("Process note with Gemini").setIcon("sparkle").onClick(async()=>{this.processImageInCurrentNote(t)})})}))}onunload(){}async activateChatView(){let e=this.app.workspace.getLeavesOfType(O);if(e.length)return this.app.workspace.revealLeaf(e[0]),e[0];let t=this.app.workspace.getRightLeaf(!1);if(t)return await t.setViewState({type:O,active:!0}),this.app.workspace.revealLeaf(t),t}getChatView(){let e=this.app.workspace.getLeavesOfType(O);return e.length?e[0].view:null}async loadSettings(){let e=await this.loadData();this.settings=Object.assign({},we,e),this.settings.triggerActions||(this.settings.triggerActions=ae),this.settings.notebooks||(this.settings.notebooks=[]),this.settings.enableTasksIntegration===void 0&&(this.settings.enableTasksIntegration=!1),this.settings.tasksNotePath||(this.settings.tasksNotePath="Tasks/Inbox.md"),this.settings.tasksSectionHeading||(this.settings.tasksSectionHeading="## Captured Tasks"),this.settings.taskPriorities===void 0&&(this.settings.taskPriorities=!0),this.settings.defaultTaskTags||(this.settings.defaultTaskTags="#captured"),(!this.settings.geminiPrompt||this.settings.geminiPrompt.trim()==="")&&(console.log("Initializing Gemini prompt to default"),this.settings.geminiPrompt=K,await this.saveSettings()),this.settings.enableDiscussionLinks===void 0&&(this.settings.enableDiscussionLinks=!0),this.settings.discussionLinkText||(this.settings.discussionLinkText="\u{1F4AC} Discuss this note with Gemini")}async saveSettings(){await this.saveData(this.settings)}async discussWithGemini(e,t){var r,c,u,g,p;let s=this.settings.geminiApiKey,i=`https://generativelanguage.googleapis.com/v1beta/models/${this.settings.selectedModel}:generateContent?key=${s}`,o={contents:[{parts:[{text:`You are having a discussion about a note that was previously processed. Here is the note content:

---
${e}
---

The user has a follow-up question or request:
"${t}"

Please provide a helpful, detailed, and thoughtful response based on the note content and their question. If appropriate, suggest related topics to explore, provide examples, or offer actionable insights.`}]}]};try{let m=await(0,h.requestUrl)({url:i,method:"POST",contentType:"application/json",body:JSON.stringify(o)});if((p=(g=(u=(c=(r=m.json.candidates)==null?void 0:r[0])==null?void 0:c.content)==null?void 0:u.parts)==null?void 0:g[0])!=null&&p.text)return m.json.candidates[0].content.parts[0].text;throw new Error("No valid response from Gemini")}catch(m){throw console.error("Gemini discussion failed:",m),m}}async appendToDiscussionFile(e,t,s,a){let i=this.app.vault.getAbstractFileByPath(e),n=window.moment().format("YYYY-MM-DD HH:mm");if(i instanceof h.TFile){let o=await this.app.vault.read(i),r=`

---

## Discussion Entry - ${n}

**Question:** ${t}

**Gemini's Response:**
${s}`,c=o+r;await this.app.vault.modify(i,c)}else{let o=`# Discussion: [[${a.basename}]]

## Discussion Entry - ${n}

**Question:** ${t}

**Gemini's Response:**
${s}

---
*Source note: [[${a.basename}]]*
*Created: ${n}*`;await this.app.vault.create(e,o)}}async getNotebookFolder(e){let t=this.settings.notebooks.find(a=>a.id===e);if(!t)return this.settings.newNoteLocation;let s=this.settings.notebookFolderPattern;return s=s.replace("{notebook}",t.name.replace(/[\\/:*?"<>|]/g,"-")),s=s.replace(/YYYY/g,window.moment().format("YYYY")),s=s.replace(/MM/g,window.moment().format("MM")),s=s.replace(/DD/g,window.moment().format("DD")),s}createNotebook(){return{id:Date.now().toString(),name:`Notebook ${this.settings.notebooks.length+1}`,startDate:new Date().toISOString(),currentPage:1,status:"active",description:""}}async showNotebookSelectionModal(){if(this.settings.notebooks.length===0){new h.Notice("No notebooks found. Creating a default notebook...");let e=this.createNotebook();e.name="My Notebook",this.settings.notebooks.push(e),await this.saveSettings()}return new Promise(e=>{let t=new h.Modal(this.app);t.titleEl.setText("Select Notebook & Page"),t.modalEl.style.cssText=`
                width: 90vw;
                max-width: 1200px;
                height: 80vh;
                max-height: 800px;
            `;let s=null,a=null,i=t.contentEl.createDiv();i.style.cssText="display: flex; flex-direction: column; height: 100%;";let n=i.createDiv({cls:"notebook-header"});n.style.cssText="padding: 15px; border-bottom: 1px solid var(--background-modifier-border); flex-shrink: 0;",n.createEl("h3",{text:"Choose Notebook"});let o=n.createDiv({cls:"setting-item"});o.style.cssText="display: flex; align-items: center; gap: 15px;",o.createEl("label",{text:"Notebook:"});let r=o.createEl("select",{cls:"dropdown"});r.style.cssText="flex: 1; max-width: 300px;",r.createEl("option",{value:"",text:"\u{1F4C4} Loose paper / No notebook"});let c=this.settings.notebooks.filter(b=>b.status==="active");if(c.length>0){let b=r.createEl("optgroup",{attr:{label:"Active Notebooks"}});c.forEach(v=>{b.createEl("option",{value:v.id,text:`\u{1F4D3} ${v.name} (${v.currentPage} pages)`})})}let u=this.settings.notebooks.filter(b=>b.status==="completed");if(u.length>0){let b=r.createEl("optgroup",{attr:{label:"Completed Notebooks"}});u.forEach(v=>{b.createEl("option",{value:v.id,text:`\u{1F4D5} ${v.name} (Completed)`})})}let g=o.createDiv({cls:"new-page-input"});g.style.cssText="display: flex; align-items: center; gap: 10px;",g.createEl("label",{text:"New page #:"});let p=g.createEl("input",{type:"number",attr:{min:"1",placeholder:"Page number"}});p.style.cssText="width: 100px;";let m=i.createDiv({cls:"page-browser"});m.style.cssText="flex: 1; overflow-y: auto; padding: 15px; background: var(--background-secondary);";let x=m.createDiv();x.style.cssText="margin-bottom: 15px;";let k=x.createEl("h4",{text:"Recent Pages"}),y=x.createEl("span",{cls:"setting-item-description",text:" - Select a page or enter a new page number above"}),D=m.createDiv({cls:"page-grid"});D.style.cssText=`
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
                gap: 15px;
                padding: 10px;
            `;let E=async b=>{var C;if(D.empty(),!b){k.setText("Recent Loose Pages"),await L();return}let v=this.settings.notebooks.find(f=>f.id===b);if(!v)return;s=v,k.setText(`Pages from ${v.name}`),p.value=v.currentPage.toString(),a=v.currentPage;let B=this.app.vault.getMarkdownFiles(),I=[];for(let f of B){let w=this.app.metadataCache.getFileCache(f);if(((C=w==null?void 0:w.frontmatter)==null?void 0:C.notebook_id)===b){let T=w.frontmatter.page||0,S=w.frontmatter.image;I.push({file:f,page:T,image:S})}}I.sort((f,w)=>w.page-f.page),y.setText(` - ${I.length} pages found`);let P=D.createDiv({cls:"page-card new-page"});P.style.cssText=`
                    border: 2px dashed var(--interactive-accent);
                    border-radius: 8px;
                    padding: 20px;
                    cursor: pointer;
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    justify-content: center;
                    min-height: 250px;
                    background: var(--background-primary);
                    transition: all 0.2s ease;
                `,P.innerHTML=`
                    <div style="font-size: 48px; margin-bottom: 10px;">\u2795</div>
                    <div style="font-weight: bold;">Add New Page</div>
                    <div style="color: var(--text-muted); font-size: 12px; margin-top: 5px;">Page ${v.currentPage}</div>
                `,P.addEventListener("mouseenter",()=>{P.style.transform="scale(1.02)",P.style.boxShadow="0 4px 8px rgba(0,0,0,0.2)"}),P.addEventListener("mouseleave",()=>{P.style.transform="scale(1)",P.style.boxShadow="none"}),P.addEventListener("click",()=>{a=v.currentPage,p.value=a.toString(),D.querySelectorAll(".page-card").forEach(f=>{f.removeClass("selected")}),P.addClass("selected"),P.style.borderColor="var(--interactive-success)",P.style.background="var(--background-modifier-hover)"});for(let f of I){let w=D.createDiv({cls:"page-card"});w.style.cssText=`
                        border: 1px solid var(--background-modifier-border);
                        border-radius: 8px;
                        overflow: hidden;
                        cursor: pointer;
                        background: var(--background-primary);
                        transition: all 0.2s ease;
                        display: flex;
                        flex-direction: column;
                    `;let T=w.createDiv({cls:"page-preview"});if(T.style.cssText=`
                        height: 150px;
                        background: var(--background-modifier-hover);
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        overflow: hidden;
                        position: relative;
                    `,f.image){let Q=this.app.vault.getFiles().find(H=>H.name===f.image);if(Q){let H=T.createEl("img");H.style.cssText="width: 100%; height: 100%; object-fit: cover;",H.src=this.app.vault.getResourcePath(Q)}else T.createDiv({text:"\u{1F4C4}",cls:"no-image"}).style.cssText="font-size: 48px; opacity: 0.3;"}else T.createDiv({text:"\u{1F4C4}",cls:"no-image"}).style.cssText="font-size: 48px; opacity: 0.3;";let S=w.createDiv({cls:"page-info"});S.style.cssText="padding: 10px;";let Y=S.createEl("div",{text:`Page ${f.page}`,cls:"page-title"});Y.style.cssText="font-weight: bold; margin-bottom: 5px;";let z=S.createEl("div",{text:f.file.basename,cls:"page-filename"});z.style.cssText="font-size: 11px; color: var(--text-muted); overflow: hidden; text-overflow: ellipsis; white-space: nowrap;";let N=S.createEl("div",{text:window.moment(f.file.stat.mtime).format("MMM DD, YYYY"),cls:"page-date"});N.style.cssText="font-size: 10px; color: var(--text-faint); margin-top: 3px;",w.addEventListener("mouseenter",()=>{w.style.transform="scale(1.02)",w.style.boxShadow="0 4px 8px rgba(0,0,0,0.2)"}),w.addEventListener("mouseleave",()=>{w.style.transform="scale(1)",w.style.boxShadow="none"}),w.addEventListener("click",()=>{this.app.workspace.getLeaf("tab").openFile(f.file)})}},L=async()=>{var B,I,P;D.empty(),g.style.display="none";let b=this.app.vault.getMarkdownFiles(),v=[];for(let C of b){let f=this.app.metadataCache.getFileCache(C);(B=f==null?void 0:f.frontmatter)!=null&&B.notebook_id||(((I=f==null?void 0:f.frontmatter)==null?void 0:I.tags)||[]).some(T=>T.includes("from-notebook")||T.includes("sketchnote"))&&v.push(C)}v.sort((C,f)=>(f.stat.mtime||0)-(C.stat.mtime||0)),y.setText(` - ${v.length} loose pages found`);for(let C of v.slice(0,20)){let f=this.app.metadataCache.getFileCache(C),w=(P=f==null?void 0:f.frontmatter)==null?void 0:P.image,T=D.createDiv({cls:"page-card"});T.style.cssText=`
                        border: 1px solid var(--background-modifier-border);
                        border-radius: 8px;
                        overflow: hidden;
                        cursor: pointer;
                        background: var(--background-primary);
                        transition: all 0.2s ease;
                    `;let S=T.createDiv({cls:"page-preview"});if(S.style.cssText=`
                        height: 150px;
                        background: var(--background-modifier-hover);
                        display: flex;
                        align-items: center;
                        justify-content: center;
                    `,w){let z=this.app.vault.getFiles().find(N=>N.name===w);if(z){let N=S.createEl("img");N.style.cssText="width: 100%; height: 100%; object-fit: cover;",N.src=this.app.vault.getResourcePath(z)}}else S.createDiv({text:"\u{1F4C4}"}).style.cssText="font-size: 48px; opacity: 0.3;";let Y=T.createDiv({cls:"page-info"});Y.style.cssText="padding: 10px;",Y.createEl("div",{text:C.basename}).style.cssText="font-weight: bold; font-size: 12px; overflow: hidden; text-overflow: ellipsis;",Y.createEl("div",{text:window.moment(C.stat.mtime).format("MMM DD, YYYY HH:mm")}).style.cssText="font-size: 10px; color: var(--text-muted); margin-top: 5px;",T.addEventListener("click",()=>{this.app.workspace.getLeaf("tab").openFile(C)}),T.addEventListener("mouseenter",()=>{T.style.transform="scale(1.02)",T.style.boxShadow="0 4px 8px rgba(0,0,0,0.2)"}),T.addEventListener("mouseleave",()=>{T.style.transform="scale(1)",T.style.boxShadow="none"})}};this.settings.currentNotebookId?(r.value=this.settings.currentNotebookId,E(this.settings.currentNotebookId)):L(),r.addEventListener("change",()=>{let b=r.value;b?(g.style.display="flex",E(b)):(s=null,a=null,L())}),p.addEventListener("input",()=>{let b=parseInt(p.value);!isNaN(b)&&b>0&&(a=b)});let A=n.createDiv({cls:"setting-item"});A.style.cssText="margin-top: 10px;";let J=A.createEl("input",{type:"checkbox",attr:{id:"auto-increment-check"}});J.checked=this.settings.autoIncrementPage;let oe=A.createEl("label",{text:" Auto-increment page number after capture",attr:{for:"auto-increment-check"}});oe.style.marginLeft="5px";let W=i.createDiv({cls:"modal-button-container"});W.style.cssText="padding: 15px; border-top: 1px solid var(--background-modifier-border); display: flex; justify-content: flex-end; gap: 10px;",W.createEl("button",{text:"Cancel"}).addEventListener("click",()=>{t.close(),e({notebook:null,pageNumber:null,cancelled:!0})}),W.createEl("button",{text:"Capture Image",cls:"mod-cta"}).addEventListener("click",async()=>{s&&a&&J.checked&&(s.currentPage=a+1),s&&(this.settings.currentNotebookId=s.id),await this.saveSettings(),t.close(),e({notebook:s,pageNumber:a,cancelled:!1})}),t.open()})}async getCurrentCoords(){return new Promise(e=>{if(!navigator.geolocation){e(null);return}navigator.geolocation.getCurrentPosition(t=>e({latitude:t.coords.latitude,longitude:t.coords.longitude}),t=>{console.error("Geolocation error:",t),e(null)},{enableHighAccuracy:!1,timeout:5e3,maximumAge:6e5})})}async getCountryFromCoords(e,t){var s;try{let i=(await(0,h.requestUrl)({url:`https://nominatim.openstreetmap.org/reverse?format=json&lat=${e}&lon=${t}&zoom=3&accept-language=en`,method:"GET",headers:{"User-Agent":"Obsidian-Gemini-Note-Processor/1.0"}})).json;if((s=i==null?void 0:i.address)!=null&&s.country)return i.address.country.toLowerCase().replace(/\s+/g,"-")}catch(a){console.error("Reverse geocoding failed:",a)}return null}async extractLocationFromImage(e){console.log("=== Starting EXIF Location Extraction ==="),console.log("Image data size:",e.byteLength,"bytes");try{let t=Buffer.from(e);console.log("Buffer created, size:",t.length);let s=fe(t);if(console.log("EXIF data parsed successfully"),s&&s.gps&&(console.log("Found gps object:",s.gps),s.gps.Latitude&&s.gps.Longitude)){console.log("GPS Latitude:",s.gps.Latitude),console.log("GPS Longitude:",s.gps.Longitude);let a=await this.getCountryFromCoords(s.gps.Latitude,s.gps.Longitude);if(a)return new h.Notice(`Location from photo: ${a}`),a}}catch(t){console.error("Error parsing EXIF data:",t)}if(this.settings.fallbackToCurrentLocation){console.log("No GPS in photo, falling back to current location...");let t=await this.getCurrentCoords();if(t){console.log("Current location:",t);let s=await this.getCountryFromCoords(t.latitude,t.longitude);if(s)return new h.Notice(`Using current location: ${s}`),s}}return console.log("=== Location extraction completed, no location found ==="),null}async processImageInCurrentNote(e){var t;if(!this.settings.geminiApiKey){new h.Notice("Gemini API key is not set.");return}new h.Notice("Processing with Gemini...");try{let s=await this.app.vault.readBinary(e),a=await this.callGeminiAPI(s);if(!a)throw new Error("API call returned no text.");this.settings.enableTriggerWords&&(a=await this.processTriggersInText(a));let i=null;this.settings.enableLocationTagging&&(i=await this.extractLocationFromImage(s));let n=this.app.workspace.getActiveFile();if(n){let r=this.parseDetectedTags(a);await this.updateNoteProperties(e,n,r,i,null,null)}let o=(t=this.app.workspace.activeEditor)==null?void 0:t.editor;if(a&&o){let r=o.getCursor(),c=o.getLine(r.line),u=`

`;if(this.settings.enableDiscussionLinks&&n){let g=encodeURIComponent(n.path);u+=`[${this.settings.discussionLinkText}](obsidian://gemini-discuss?file=${g})

`}u+=`---
${a}
---`,o.replaceRange(u,{line:r.line,ch:c.length}),new h.Notice("Note processed successfully!")}}catch(s){console.error("Error during image processing:",s),new h.Notice("Failed to process image. Check console.")}}async captureFromAndroidCamera(){if(this.settings.androidCameraMode==="ask"){let e=await this.showAndroidCameraModeModal();if(!e)return null;this.settings.androidCameraMode=e,await this.saveSettings()}return this.settings.androidCameraMode==="gallery"?null:new Promise(e=>{let t=new h.Modal(this.app);t.titleEl.setText("Camera Capture");let s=t.contentEl.createDiv({cls:"camera-container"});s.style.cssText="position: relative; width: 100%; max-width: 500px; margin: 0 auto;";let a=s.createEl("video",{attr:{autoplay:!0,playsinline:!0},cls:"camera-video"});a.style.cssText="width: 100%; height: auto; border-radius: 8px;";let i=document.createElement("canvas"),n=i.getContext("2d"),o=t.contentEl.createDiv({cls:"camera-buttons"});o.style.cssText="display: flex; gap: 10px; justify-content: center; margin-top: 15px;";let r=o.createEl("button",{text:"\u{1F4F8} Capture",cls:"mod-cta"});r.disabled=!0;let c=o.createEl("button",{text:"\u{1F5BC}\uFE0F Use Gallery Instead"}),u=o.createEl("button",{text:"Cancel"}),g=null;if(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia){s.style.display="none",r.style.display="none";let p=t.contentEl.createDiv({cls:"camera-error"});p.style.cssText="padding: 20px; text-align: center;",p.innerHTML=`
                    <h3>Camera Not Available</h3>
                    <p>Direct camera access is not supported in this version of Obsidian.</p>
                    <p>Click "Use Gallery Instead" to select a photo from your device.</p>
                `,t.open(),c.onclick=()=>{t.close(),e(null)},u.onclick=()=>{t.close(),e(null)};return}navigator.mediaDevices.getUserMedia({video:{facingMode:"environment",width:{ideal:1920},height:{ideal:1080}},audio:!1}).then(p=>{g=p,a.srcObject=g,r.disabled=!1,c.style.display="none"}).catch(p=>{console.error("Camera access failed:",p),s.style.display="none",r.style.display="none";let m=t.contentEl.createDiv({cls:"camera-error"});m.style.cssText="padding: 20px; text-align: center;";let x="<h3>Camera Access Issue</h3>";p.name==="NotAllowedError"||p.name==="PermissionDeniedError"?x+=`
                        <div style="background: var(--background-modifier-error-hover); padding: 15px; border-radius: 8px; margin: 15px 0;">
                            <p><strong>\u26A0\uFE0F Known Android Limitation</strong></p>
                            <p>Obsidian on Android may not have camera permission available.</p>
                        </div>
                        <p><strong>Recommended Solution:</strong></p>
                        <p>Use "Gallery" mode to take photos with your camera app, then select them.</p>
                        <div style="margin-top: 20px;">
                            <button class="mod-cta" id="switch-to-gallery">Switch to Gallery Mode</button>
                        </div>`:x+=`<p>Camera error: ${p.message||p.name}</p>
                        <p>Try using Gallery mode instead.</p>`,m.innerHTML=x,setTimeout(()=>{let k=t.contentEl.querySelector("#switch-to-gallery");k&&k.addEventListener("click",async()=>{this.settings.androidCameraMode="gallery",await this.saveSettings(),t.close(),e(null)})},0)}),r.onclick=async()=>{!n||!g||(i.width=a.videoWidth,i.height=a.videoHeight,n.drawImage(a,0,0),i.toBlob(async p=>{if(p){let m=await p.arrayBuffer();g==null||g.getTracks().forEach(x=>x.stop()),t.close(),e(m)}else e(null)},"image/jpeg",.9))},c.onclick=()=>{g==null||g.getTracks().forEach(p=>p.stop()),t.close(),e(null)},u.onclick=()=>{g==null||g.getTracks().forEach(p=>p.stop()),t.close(),e(null)},t.onClose=()=>{g==null||g.getTracks().forEach(p=>p.stop())},t.open()})}async showAndroidCameraModeModal(){return new Promise(e=>{let t=new h.Modal(this.app);t.titleEl.setText("Choose Capture Method");let s=t.contentEl;s.style.cssText="text-align: center;",s.createEl("p",{text:"How would you like to capture images on Android?",cls:"setting-item-description"});let a=s.createDiv();a.style.cssText="margin: 20px 0;";let i=a.createDiv({cls:"capture-option"});i.style.cssText="padding: 15px; margin: 10px; border: 1px solid var(--background-modifier-border); border-radius: 8px; cursor: pointer;",i.innerHTML=`
                <h4>\u{1F4F8} Direct Camera</h4>
                <p style="font-size: 0.9em; opacity: 0.8;">Try to use camera directly in Obsidian</p>
                <p style="font-size: 0.8em; color: var(--text-warning);">\u26A0\uFE0F May not work on all Android devices</p>
            `;let n=a.createDiv({cls:"capture-option"});n.style.cssText="padding: 15px; margin: 10px; border: 2px solid var(--interactive-accent); border-radius: 8px; cursor: pointer; background: var(--background-modifier-hover);",n.innerHTML=`
                <h4>\u{1F5BC}\uFE0F Gallery (Recommended)</h4>
                <p style="font-size: 0.9em; opacity: 0.8;">Use your camera app, then select the photo</p>
                <p style="font-size: 0.8em; color: var(--text-success);">\u2713 Works on all devices</p>
            `,i.onclick=()=>{t.close(),e("camera")},n.onclick=()=>{t.close(),e("gallery")};let o=s.createEl("button",{text:"Cancel"});o.style.cssText="margin-top: 10px;",o.onclick=()=>{t.close(),e(null)},t.open()})}async createNoteFromImageCapture(){if(!this.settings.geminiApiKey){new h.Notice("Gemini API key is not set.");return}let{notebook:e,pageNumber:t,cancelled:s}=await this.showNotebookSelectionModal();if(s)return;let a=navigator.userAgent,i=/iPhone|iPad|iPod/i.test(a),n=/Android/i.test(a);console.log("Platform detection - iOS:",i,"Android:",n,"UserAgent:",a);let o=null,r="captured-image.jpg";if(n&&this.settings.androidCameraMode!=="gallery"&&(o=await this.captureFromAndroidCamera(),!o&&this.settings.androidCameraMode==="camera"&&new h.Notice("Camera access failed. Falling back to gallery...")),!o){let c=await new Promise(u=>{let g=document.createElement("input");g.type="file",g.accept="image/*",i?(g.capture="environment",console.log("iOS device detected - camera capture enabled")):n&&this.settings.androidCameraMode==="camera"&&(g.capture="environment",console.log("Android camera mode - capture enabled")),g.style.display="none",document.body.appendChild(g),g.onchange=()=>{let p=g.files?g.files[0]:null;p&&console.log("File selected:",p.name,"Size:",p.size),document.body.removeChild(g),u(p)},g.addEventListener("cancel",()=>{console.log("File selection cancelled"),document.body.removeChild(g),u(null)}),g.click()});c&&(o=await c.arrayBuffer(),r=c.name)}if(!o){console.log("No image data received, aborting process.");return}console.log("Processing image:",r,"Size:",o.byteLength),await this.processCapturedImage(o,r,e,t)}async processCapturedImage(e,t,s,a){var i;new h.Notice("Uploading and processing image...");try{let n="";s&&this.settings.groupByNotebook?n=await this.getAndEnsureFolder(await this.getNotebookFolder(s.id)):n=await this.getAndEnsureFolder(this.settings.newNoteLocation);let o=await this.getAndEnsureFolder(this.settings.attachmentLocation),r=((i=t.split(".").pop())==null?void 0:i.toLowerCase())||"jpg",c=`GeminiCapture-${Date.now()}.${r}`,u=`${o}/${c}`,g=await this.app.vault.createBinary(u,e),p=await this.callGeminiAPI(e);if(!p)throw new Error("API call returned no text.");this.settings.enableTriggerWords&&(p=await this.processTriggersInText(p));let m=this.parseDetectedTags(p),x=null;this.settings.enableLocationTagging&&(x=await this.extractLocationFromImage(e));let k=window.moment().format("YYYY-MM-DD HH-mm-ss"),y;s&&a?y=`Page ${a} - ${k}.md`:y=`Note ${k}.md`;let D=n?`${n}/${y}`:y,E="";if(this.settings.enableDiscussionLinks){let A=encodeURIComponent(D);E+=`[${this.settings.discussionLinkText}](obsidian://gemini-discuss?file=${A})

`}E+=`![[${g.path}]]
`,s&&a?E+=`
> **Notebook:** ${s.name} | **Page:** ${a}
`:s||(E+=`
> **Source:** Loose paper / No notebook
`),E+=`
---
${p}
---`;let L=await this.app.vault.create(D,E);await this.updateNoteProperties(g,L,m,x,(s==null?void 0:s.id)||null,a),this.app.workspace.openLinkText(L.path,"",!0),new h.Notice("New note created successfully!")}catch(n){console.error("Error creating note from image:",n),new h.Notice("Failed to create note. See console.")}}async findRelatedNotesByTags(e){var o;if(!e||e.length===0)return"No tags found to search for related notes.";let t=this.app.vault.getMarkdownFiles(),s=this.app.workspace.getActiveFile(),a=new Map;for(let r of t){if(s&&r.path===s.path)continue;let c=this.app.metadataCache.getFileCache(r);if(!((o=c==null?void 0:c.frontmatter)!=null&&o.tags))continue;let u=Array.isArray(c.frontmatter.tags)?c.frontmatter.tags:[c.frontmatter.tags],g=e.filter(p=>u.includes(p));g.length>0&&a.set(r.path,{file:r,matchedTags:g,matchCount:g.length})}if(a.size===0)return"No related notes found with matching tags.";let i=Array.from(a.values()).sort((r,c)=>c.matchCount-r.matchCount).slice(0,10),n=`### Related Notes by Tags

`;n+=`Found ${a.size} related notes. Showing top ${Math.min(10,a.size)}:

`;for(let r of i){let c=`[[${r.file.basename}]]`,u=r.matchedTags.map(g=>`#${g}`).join(", ");n+=`- ${c} (${r.matchCount} matching tags: ${u})
`}return n}async processTriggersInText(e){let t=this.detectTriggerWords(e),s=!1;console.log(`Found ${t.length} triggers in text`);let a=t.find(n=>n.action.keyword==="Tasks");if(a&&this.settings.enableTasksIntegration){console.log("Tasks trigger found with content:",a.content);let n=await this.addTasksToTasksNote(a.content);n>0?(s=!0,new h.Notice(`Added ${n} tasks to ${this.settings.tasksNotePath}`)):console.log("No tasks were added (returned 0)")}if(t.length===0)return e;let i=[];for(let n of t){if(n.action.keyword==="Tasks"&&s){i.push(`### Tasks
\u2705 ${n.content.split(`
`).filter(r=>r.trim()).length} tasks added to [[${this.settings.tasksNotePath.replace(".md","")}]]`);continue}if(n.action.action==="taglinks"||n.action.action==="related"){new h.Notice("Finding related notes by tags...");let r=this.parseDetectedTags(e),c=await this.findRelatedNotesByTags(r);i.push(c);continue}new h.Notice(`Processing trigger: ${n.trigger}...`);let o=await this.processTriggerWithGemini(n);o&&i.push(o)}return i.length>0?`${e}

---
## Triggered Actions

${i.join(`

`)}`:e}async addTasksToTasksNote(e){try{let t=this.parseTasksForObsidianTasks(e);if(t.length===0)return console.log("No tasks parsed from content"),0;console.log(`Parsed ${t.length} tasks:`,t);let s=this.app.vault.getAbstractFileByPath(this.settings.tasksNotePath);if(!s){console.log(`Tasks file not found at ${this.settings.tasksNotePath}, creating...`);let u=this.settings.tasksNotePath.substring(0,this.settings.tasksNotePath.lastIndexOf("/"));u&&!await this.app.vault.adapter.exists(u)&&(console.log(`Creating folder: ${u}`),await this.app.vault.createFolder(u));let g=`# Tasks

${this.settings.tasksSectionHeading}
`;console.log("Creating tasks file with initial content"),s=await this.app.vault.create(this.settings.tasksNotePath,g)}if(!(s instanceof h.TFile))return console.error("Tasks file is not a TFile instance"),0;let a=await this.app.vault.read(s);console.log("Current tasks file content length:",a.length);let i=new RegExp(`^${this.settings.tasksSectionHeading}`,"gm"),n=a.match(i),o=t.map(u=>this.formatTaskForObsidianTasks(u)).join(`
`),c=`
### Captured ${window.moment().format("YYYY-MM-DD HH:mm")}

${o}
`;if(console.log("Tasks block to add:",c),n){let u=a.indexOf(n[0])+n[0].length;a=a.slice(0,u)+c+a.slice(u)}else a+=`

${this.settings.tasksSectionHeading}${c}`;return console.log("Writing updated content to tasks file..."),await this.app.vault.modify(s,a),console.log(`Successfully added ${t.length} tasks to ${this.settings.tasksNotePath}`),t.length}catch(t){return console.error("Error adding tasks to tasks note:",t),new h.Notice(`Error adding tasks: ${t.message}`),0}}parseTasksForObsidianTasks(e){let t=[],s=e.split(`
`);console.log(`Parsing tasks from ${s.length} lines of content`);for(let a of s){let i=a.trim();if(!i)continue;console.log(`Processing line: "${i}"`);let n="",o=i,r={};o=o.replace(/^[-*•]\s*/,""),o.match(/^!!!|^HIGH:/i)?(n="\u23EB",o=o.replace(/^(!!!|HIGH:)/i,"").trim()):o.match(/^!!|^MEDIUM:/i)?(n="\u{1F53C}",o=o.replace(/^(!!|MEDIUM:)/i,"").trim()):o.match(/^!|^LOW:/i)&&(n="\u{1F53D}",o=o.replace(/^(!|LOW:)/i,"").trim());let c=o.match(/\b(?:by|due)\s+(tomorrow|today|monday|tuesday|wednesday|thursday|friday|saturday|sunday|next\s+\w+|[\w\s]+?)(?=\s*[-,]|\s*$)/i);if(c){let x=this.parseNaturalDate(c[1]);x&&(r.due=x,o=o.replace(c[0],"").trim())}let u=o.match(/\b(?:scheduled|on)\s+(tomorrow|today|monday|tuesday|wednesday|thursday|friday|saturday|sunday|next\s+\w+|[\w\s]+?)(?=\s*[-,]|\s*$)/i);if(u){let x=this.parseNaturalDate(u[1]);x&&(r.scheduled=x,o=o.replace(u[0],"").trim())}let g=o.match(/\b(?:start|begin|starting)\s+(tomorrow|today|monday|tuesday|wednesday|thursday|friday|saturday|sunday|next\s+\w+|[\w\s]+?)(?=\s*[-,]|\s*$)/i);if(g){let x=this.parseNaturalDate(g[1]);x&&(r.start=x,o=o.replace(g[0],"").trim())}let p=[],m=o.match(/#[\w-]+/g);if(m&&(p.push(...m),o=o.replace(/#[\w-]+/g,"").trim()),this.settings.defaultTaskTags){let x=this.settings.defaultTaskTags.split(",").map(k=>{let y=k.trim();return y.startsWith("#")?y:"#"+y});p.push(...x)}o=o.replace(/[,\-]+$/,"").trim(),o&&(console.log(`Added task: "${o}" with priority: "${n}" and dates:`,r),t.push({text:o,priority:n,tags:[...new Set(p)],dates:Object.keys(r).length>0?r:void 0}))}return console.log(`Parsed ${t.length} total tasks`),t}formatTaskForObsidianTasks(e){let t="- [ ] ";return this.settings.taskPriorities&&e.priority&&(t+=e.priority+" "),t+=e.text,e.dates&&(e.dates.due&&(t+=` \u{1F4C5} ${e.dates.due}`),e.dates.scheduled&&(t+=` \u23F3 ${e.dates.scheduled}`),e.dates.start&&(t+=` \u{1F6EB} ${e.dates.start}`)),t+=` \u2795 ${window.moment().format("YYYY-MM-DD")}`,e.tags.length>0&&(t+=" "+e.tags.join(" ")),t}parseNaturalDate(e,t){let s=t||window.moment(),a=e.toLowerCase().trim();if(a==="today"||a==="tonight")return s.format("YYYY-MM-DD");if(a==="tomorrow")return s.clone().add(1,"day").format("YYYY-MM-DD");if(a==="yesterday")return s.clone().subtract(1,"day").format("YYYY-MM-DD");let i=a.match(/^next\s+(monday|tuesday|wednesday|thursday|friday|saturday|sunday|week|month|year)$/);if(i){let o=i[1];if(["monday","tuesday","wednesday","thursday","friday","saturday","sunday"].includes(o)){let r=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].indexOf(o),c=s.clone();return c.day()>=r&&c.add(1,"week"),c.day(r),c.format("YYYY-MM-DD")}if(o==="week")return s.clone().add(1,"week").format("YYYY-MM-DD");if(o==="month")return s.clone().add(1,"month").format("YYYY-MM-DD");if(o==="year")return s.clone().add(1,"year").format("YYYY-MM-DD")}let n=window.moment(e,["YYYY-MM-DD","MM/DD/YYYY","DD/MM/YYYY","MMM DD, YYYY","MMMM DD, YYYY"],!0);return n.isValid()?n.format("YYYY-MM-DD"):null}async getAndEnsureFolder(e){let t=e.trim();if(!t||t==="/")return"";if(e.includes("{notebook}")||(t=t.replace(/YYYY/g,window.moment().format("YYYY")).replace(/MM/g,window.moment().format("MM")).replace(/DD/g,window.moment().format("DD"))),t=t.replace(/\/+$/,""),t=t.replace(/\/+/g,"/"),!await this.app.vault.adapter.exists(t))try{await this.app.vault.createFolder(t)}catch(s){return new h.Notice(`Error creating folder: ${t}.`),console.error("Error creating folder:",s),""}return t}parseDetectedTags(e){if(!e)return[];let t=/### Detected Tags\s*\n(.*?)(?:\n###|$)/s,s=e.match(t);return s&&s[1]&&s[1].toLowerCase().trim()!=="none identified."?s[1].split(",").map(a=>a.trim()).filter(a=>a):[]}async updateNoteProperties(e,t,s=[],a,i,n){let o=new Date().getFullYear(),r=this.settings.customTags.split(",").map(u=>u.trim()).filter(u=>u),c=i?this.settings.notebooks.find(u=>u.id===i):null;await this.app.fileManager.processFrontMatter(t,u=>{u.tags=u.tags||[],Array.isArray(u.tags)||(u.tags=[u.tags]);let g=[`notes${o}`,...r,...s];a&&g.push(a),c&&g.push(`notebook-${c.name.toLowerCase().replace(/\s+/g,"-")}`);for(let p of g)p&&!u.tags.includes(p)&&u.tags.push(p);u.image=e.name,u.created=window.moment().format("YYYY-MM-DD"),c&&(u.notebook=c.name,u.notebook_id=c.id,n&&(u.page=n))})}processExtractedTasks(e){if(!e||e.toLowerCase().trim()==="none identified.")return"None identified.";console.log("Processing tasks section:",e);let t=e.split(`
`),s=[],a=window.moment().format("YYYY-MM-DD"),i="";this.settings.defaultTaskTags&&(i=" "+this.settings.defaultTaskTags.split(",").map(o=>{let r=o.trim();return r.startsWith("#")?r:"#"+r}).join(" "));for(let n of t){let o=n.trim();if(!o)continue;console.log("Processing task line:",o);let r=o.match(/^-\s*\[\s*\]\s*(.+)/),c="";if(r?c=r[1]:o.startsWith("-")||o.startsWith("*")?c=o.replace(/^[-*]\s*/,"").trim():!o.startsWith("#")&&o.length>0&&(c=o),c){let u="",g={};c.match(/^!!!|^HIGH:/i)?(u="\u23EB ",c=c.replace(/^(!!!|HIGH:)/i,"").trim()):c.match(/^!!|^MEDIUM:/i)?(u="\u{1F53C} ",c=c.replace(/^(!!|MEDIUM:)/i,"").trim()):c.match(/^!|^LOW:/i)&&(u="\u{1F53D} ",c=c.replace(/^(!|LOW:)/i,"").trim());let p=c.match(/\bDUE:\s*([^,\s]+(?:\s+[^,\s]+)*?)(?=\s*(?:SCHEDULED:|START:|$))/i);if(p){let y=this.parseNaturalDate(p[1]);y&&(g.due=y,c=c.replace(p[0],"").trim())}let m=c.match(/\bSCHEDULED:\s*([^,\s]+(?:\s+[^,\s]+)*?)(?=\s*(?:DUE:|START:|$))/i);if(m){let y=this.parseNaturalDate(m[1]);y&&(g.scheduled=y,c=c.replace(m[0],"").trim())}let x=c.match(/\bSTART:\s*([^,\s]+(?:\s+[^,\s]+)*?)(?=\s*(?:DUE:|SCHEDULED:|$))/i);if(x){let y=this.parseNaturalDate(x[1]);y&&(g.start=y,c=c.replace(x[0],"").trim())}let k=`- [ ] ${u}${c}`;g.due&&(k+=` \u{1F4C5} ${g.due}`),g.scheduled&&(k+=` \u23F3 ${g.scheduled}`),g.start&&(k+=` \u{1F6EB} ${g.start}`),k+=` \u2795 ${a}`,k+=i,console.log("Formatted task:",k),s.push(k)}}return s.join(`
`)}async callGeminiAPI(e){var r,c,u,g;let t=this.settings.geminiApiKey,a=`https://generativelanguage.googleapis.com/v1beta/models/${this.settings.selectedModel}:generateContent?key=${t}`,i=ye(e),n=this.settings.geminiPrompt;this.settings.enableDeepResearch&&(n+=`
				
### Deep Research
[Also, identify any product names, technologies, or key concepts mentioned in the note. For each item, provide a brief, one-sentence description and a relevant URL (like an official website or Wikipedia page) for more information. Format each item as a bullet point. If none are found, write "None identified."]`);let o={contents:[{parts:[{text:n},{inline_data:{mime_type:"image/jpeg",data:i}}]}]};try{let m=(await(0,h.requestUrl)({url:a,method:"POST",contentType:"application/json",body:JSON.stringify(o)})).json;if(m.candidates&&((g=(u=(c=(r=m.candidates[0])==null?void 0:r.content)==null?void 0:c.parts)==null?void 0:u[0])!=null&&g.text)){let x=m.candidates[0].content.parts[0].text,k=/### Tasks\s*\n([\s\S]*?)(?=\n###|$)/,y=x.match(k);if(y&&y[1]){console.log("Found Tasks section, processing...");let D=this.processExtractedTasks(y[1]);x=x.replace(y[0],`### Tasks
${D}`)}return x}else throw new Error("Unexpected response structure from Gemini API")}catch(p){throw console.error("Gemini API call failed:",p),p}}detectTriggerWords(e){let t=[],s=/(?:<u>([\w\s]+)<\/u>|__([\w\s]+)__)\s*:?\s*([\s\S]*?)(?=(?:<u>|__|\n\n|$))/gi,a;for(;(a=s.exec(e))!==null;){let i=(a[1]||a[2]).trim(),n=a[3].trim(),o=i.match(/^Translate\s+(?:to|into)\s+(\w+)$/i);if(o){let u=o[1],g=this.settings.triggerActions.find(p=>p.action==="translate"&&p.enabled);g&&t.push({trigger:`Translate to ${u}`,content:n,action:{...g,keyword:`Translate to ${u}`}});continue}let r=i.split(/\s+/)[0],c=this.settings.triggerActions.find(u=>u.keyword.toLowerCase()===r.toLowerCase()&&u.enabled);c&&t.push({trigger:r,content:n,action:c})}return t}async processTriggerWithGemini(e){var r,c,u,g;let t={brief:"Provide a concise response, 2-3 sentences per item.",moderate:"Provide a balanced response, 1-2 paragraphs per item.",detailed:"Provide a comprehensive response with full explanations, examples, and context."},s="";if(e.action.action==="translate"){let p=e.trigger.match(/Translate\s+(?:to|into)\s+(\w+)/i);p&&(s=p[1])}let i={research:`Research the following topics and provide ${t[this.settings.researchResponseLength]} Format as a numbered list matching the input:
${e.content}`,expand:`Take this brief note or concept and expand it into detailed, well-structured paragraphs: 
${e.content}
${t[this.settings.researchResponseLength]}`,summarize:`Create a concise summary of the following content. Include key points and takeaways:
${e.content}`,actions:`Extract all action items from this content and create a prioritized task list with suggested deadlines:
${e.content}`,tasks:`Format the following as a task list:
${e.content}`,analyze:`Provide a critical analysis of the following. Include pros/cons, potential risks, and opportunities:
${e.content}`,define:`Provide clear definitions with examples for these terms:
${e.content}`,translate:s?`Translate the following content to ${s}. Provide only the translation, maintaining the same format and structure as the original:
${e.content}`:`Translate the following content. Target language is specified first, then the content:
${e.content}`,rewrite:`Rewrite the following content in the specified style (formal/casual/technical/email/etc):
${e.content}`,questions:`Generate thought-provoking questions about this topic to encourage deeper thinking:
${e.content}`,connect:`Identify connections to other concepts, related topics, and interdisciplinary links for:
${e.content}`,organize:`Organize the following content into a clear, logical structure with categories and priorities:
${e.content}`,taglinks:"Finding related notes by tags...",related:"Finding related notes by tags..."}[e.action.action]||`Process: ${e.content}`,n=`https://generativelanguage.googleapis.com/v1beta/models/${this.settings.selectedModel}:generateContent?key=${this.settings.geminiApiKey}`,o={contents:[{parts:[{text:i}]}]};try{let m=(await(0,h.requestUrl)({url:n,method:"POST",contentType:"application/json",body:JSON.stringify(o)})).json;if(m.candidates&&((g=(u=(c=(r=m.candidates[0])==null?void 0:r.content)==null?void 0:c.parts)==null?void 0:u[0])!=null&&g.text))return`### ${e.trigger} Results
${m.candidates[0].content.parts[0].text}`}catch(p){return console.error(`Failed to process trigger "${e.trigger}":`,p),`### ${e.trigger} - Processing Failed
Could not process this trigger action.`}return""}},X=class extends h.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Gemini Note Processor Settings"});let t=e.createDiv({cls:"setting-item"});t.style.cssText="padding: 20px; background: var(--background-modifier-hover); border-radius: 8px; margin-bottom: 20px; text-align: center;",t.createEl("p",{text:"If you find this plugin helpful, consider supporting its development!",cls:"setting-item-description"});let a=t.createEl("a",{href:"https://buymeacoffee.com/farsonic",attr:{target:"_blank"}}).createEl("img",{attr:{src:"https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png",alt:"Buy Me A Coffee"}});if(a.style.cssText="height: 60px; width: 217px; margin-top: 10px;",t.createEl("p",{text:"\u2615 Your support helps keep this plugin maintained and improved!",cls:"setting-item-description"}),new h.Setting(e).setName("Gemini API Key").setDesc("Your Google AI Studio API key for Gemini").addText(i=>i.setPlaceholder("Enter your API key").setValue(this.plugin.settings.geminiApiKey).onChange(async n=>{this.plugin.settings.geminiApiKey=n,await this.plugin.saveSettings()})),e.createEl("h2",{text:"Prompt Configuration"}),new h.Setting(e).setName("Gemini Prompt").setDesc("Edit the prompt that tells Gemini how to process your notes (be careful with changes)").addTextArea(i=>{let n="You are an expert note-processing assistant integrated into Obsidian. I am providing you with an image of a handwritten note.",o=this.plugin.settings.geminiPrompt||n;return i.setValue(o),i.inputEl.style.width="100%",i.inputEl.style.height="300px",i.inputEl.style.fontSize="11px",i.inputEl.style.fontFamily="monospace",i.onChange(async r=>{this.plugin.settings.geminiPrompt=r,await this.plugin.saveSettings()}),i}),new h.Setting(e).setName("Reset Prompt").setDesc("Reset the prompt to the default template").addButton(i=>i.setButtonText("Reset to Default").onClick(async()=>{this.plugin.settings.geminiPrompt=K,await this.plugin.saveSettings(),this.display()})),e.createEl("h2",{text:"Notebook Management"}),new h.Setting(e).setName("Group Notes by Notebook").setDesc("Organize captured notes into notebook-specific folders").addToggle(i=>i.setValue(this.plugin.settings.groupByNotebook).onChange(async n=>{this.plugin.settings.groupByNotebook=n,await this.plugin.saveSettings()})),new h.Setting(e).setName("Auto-increment Page Numbers").setDesc("Automatically increment page number after each capture").addToggle(i=>i.setValue(this.plugin.settings.autoIncrementPage).onChange(async n=>{this.plugin.settings.autoIncrementPage=n,await this.plugin.saveSettings()})),new h.Setting(e).setName("Notebook Folder Pattern").setDesc("Folder structure for notebook organization. Use {notebook} for notebook name.").addText(i=>i.setPlaceholder("Notebooks/{notebook}/YYYY-MM").setValue(this.plugin.settings.notebookFolderPattern).onChange(async n=>{this.plugin.settings.notebookFolderPattern=n,await this.plugin.saveSettings()})),e.createEl("h3",{text:"Manage Notebooks"}),e.createEl("p",{text:"Add and manage your physical notebooks.",cls:"setting-item-description"}),new h.Setting(e).setName("Add New Notebook").setDesc("Create a new notebook entry").addButton(i=>i.setButtonText("Add Notebook").onClick(async()=>{let n=this.plugin.createNotebook();this.plugin.settings.notebooks.push(n),await this.plugin.saveSettings(),this.display()})),this.plugin.settings.notebooks.forEach((i,n)=>{let o=new h.Setting(e).setName(i.name).setDesc(`Status: ${i.status} | Current Page: ${i.currentPage}${i.totalPages?`/${i.totalPages}`:""}`);o.addText(r=>r.setPlaceholder("Notebook name").setValue(i.name).onChange(async c=>{i.name=c,await this.plugin.saveSettings()})),o.addText(r=>r.setPlaceholder("Page").setValue(i.currentPage.toString()).onChange(async c=>{let u=parseInt(c);!isNaN(u)&&u>0&&(i.currentPage=u,await this.plugin.saveSettings())})).setTooltip("Current page number"),o.addDropdown(r=>r.addOption("active","Active").addOption("completed","Completed").addOption("archived","Archived").setValue(i.status).onChange(async c=>{i.status=c,await this.plugin.saveSettings(),this.display()})),o.addButton(r=>r.setButtonText("Delete").setWarning().onClick(async()=>{confirm(`Delete notebook "${i.name}"? This won't delete existing notes.`)&&(this.plugin.settings.notebooks.splice(n,1),await this.plugin.saveSettings(),this.display())}))}),e.createEl("h2",{text:"File Organization"}),new h.Setting(e).setName("New Note Location").setDesc("Default folder for new notes (when not using notebooks). Supports YYYY, MM, DD placeholders.").addText(i=>i.setPlaceholder("e.g., Scans/YYYY-MM").setValue(this.plugin.settings.newNoteLocation).onChange(async n=>{this.plugin.settings.newNoteLocation=n,await this.plugin.saveSettings()})),new h.Setting(e).setName("Attachment Location").setDesc("Folder for new image attachments. Supports YYYY, MM, DD.").addText(i=>i.setPlaceholder("e.g., Scans/YYYY-MM/Attachments").setValue(this.plugin.settings.attachmentLocation).onChange(async n=>{this.plugin.settings.attachmentLocation=n,await this.plugin.saveSettings()})),new h.Setting(e).setName("Custom Tags").setDesc("Comma-separated tags to add to note properties.").addText(i=>i.setPlaceholder("e.g., sketchnote, from-notebook").setValue(this.plugin.settings.customTags).onChange(async n=>{this.plugin.settings.customTags=n,await this.plugin.saveSettings()})),e.createEl("h2",{text:"Processing Options"}),new h.Setting(e).setName("Enable Deep Research").setDesc("Gemini will also research topics found in the note.").addToggle(i=>i.setValue(this.plugin.settings.enableDeepResearch).onChange(async n=>{this.plugin.settings.enableDeepResearch=n,await this.plugin.saveSettings()})),new h.Setting(e).setName("Enable Location Tagging").setDesc("Extract location from photo EXIF data and add as a country tag.").addToggle(i=>i.setValue(this.plugin.settings.enableLocationTagging).onChange(async n=>{this.plugin.settings.enableLocationTagging=n,await this.plugin.saveSettings()})),new h.Setting(e).setName("Fallback to Current Location").setDesc("If no GPS data in photo, use your current location instead (requires location permission).").addToggle(i=>i.setValue(this.plugin.settings.fallbackToCurrentLocation).onChange(async n=>{this.plugin.settings.fallbackToCurrentLocation=n,await this.plugin.saveSettings()})),e.createEl("h2",{text:"Discussion Settings"}),new h.Setting(e).setName("Enable Discussion Links").setDesc("Add a link to discuss the note with Gemini at the top of processed notes").addToggle(i=>i.setValue(this.plugin.settings.enableDiscussionLinks).onChange(async n=>{this.plugin.settings.enableDiscussionLinks=n,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.enableDiscussionLinks&&(new h.Setting(e).setName("Discussion Link Text").setDesc("Customize the text for the discussion link").addText(i=>i.setPlaceholder("\u{1F4AC} Discuss this note with Gemini").setValue(this.plugin.settings.discussionLinkText).onChange(async n=>{this.plugin.settings.discussionLinkText=n||"\u{1F4AC} Discuss this note with Gemini",await this.plugin.saveSettings()})),e.createEl("p",{text:"\u{1F4A1} You can also use the command palette (Ctrl/Cmd+P) to open Gemini Chat for any note.",cls:"setting-item-description"})),e.createEl("h2",{text:"Trigger Words"}),new h.Setting(e).setName("Enable Trigger Words").setDesc("Process underlined keywords as special triggers for additional Gemini actions").addToggle(i=>i.setValue(this.plugin.settings.enableTriggerWords).onChange(async n=>{this.plugin.settings.enableTriggerWords=n,this.display()})),this.plugin.settings.enableTriggerWords){new h.Setting(e).setName("Research Response Length").setDesc("How detailed should triggered research responses be?").addDropdown(i=>i.addOption("brief","Brief (2-3 sentences)").addOption("moderate","Moderate (1-2 paragraphs)").addOption("detailed","Detailed (comprehensive)").setValue(this.plugin.settings.researchResponseLength).onChange(async n=>{this.plugin.settings.researchResponseLength=n,await this.plugin.saveSettings()})),e.createEl("h3",{text:"Trigger Words Configuration"}),e.createEl("p",{text:"Enable/disable specific trigger words. Underline words in your handwritten notes to activate these AI-powered actions.",cls:"setting-item-description"});for(let i of this.plugin.settings.triggerActions){if(i.keyword==="Summarise"&&this.plugin.settings.triggerActions.find(o=>o.keyword==="Summarize")||i.keyword==="Analyse"&&this.plugin.settings.triggerActions.find(o=>o.keyword==="Analyze")||i.keyword==="Organise"&&this.plugin.settings.triggerActions.find(o=>o.keyword==="Organize"))continue;let n=this.getTriggerUsageDescription(i.keyword,i.action);new h.Setting(e).setName(i.keyword).setDesc(n).addToggle(o=>o.setValue(i.enabled).onChange(async r=>{let u={Summarize:["Summarize","Summarise"],Analyze:["Analyze","Analyse"],Organize:["Organize","Organise"]}[i.keyword]||[i.keyword];for(let g of u){let p=this.plugin.settings.triggerActions.findIndex(m=>m.keyword===g);p!==-1&&(this.plugin.settings.triggerActions[p].enabled=r)}await this.plugin.saveSettings()}))}}e.createEl("h2",{text:"Obsidian Tasks Integration"}),e.createEl("p",{text:"Integrate with Obsidian Tasks plugin to automatically add captured tasks to your task management system.",cls:"setting-item-description"}),new h.Setting(e).setName("Enable Tasks Integration").setDesc('Automatically add tasks to your Obsidian Tasks note when using the "Tasks" trigger word').addToggle(i=>i.setValue(this.plugin.settings.enableTasksIntegration).onChange(async n=>{this.plugin.settings.enableTasksIntegration=n,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.enableTasksIntegration&&(new h.Setting(e).setName("Tasks Note Path").setDesc("Path to your main tasks note (e.g., Tasks/Inbox.md)").addText(i=>i.setPlaceholder("Tasks/Inbox.md").setValue(this.plugin.settings.tasksNotePath).onChange(async n=>{this.plugin.settings.tasksNotePath=n,await this.plugin.saveSettings()})),new h.Setting(e).setName("Tasks Section Heading").setDesc("Heading under which captured tasks will be added").addText(i=>i.setPlaceholder("## Captured Tasks").setValue(this.plugin.settings.tasksSectionHeading).onChange(async n=>{this.plugin.settings.tasksSectionHeading=n,await this.plugin.saveSettings()})),new h.Setting(e).setName("Enable Priority Markers").setDesc("Detect priority markers (!, !!, !!!) and add priority emojis to tasks").addToggle(i=>i.setValue(this.plugin.settings.taskPriorities).onChange(async n=>{this.plugin.settings.taskPriorities=n,await this.plugin.saveSettings()})),new h.Setting(e).setName("Default Task Tags").setDesc("Tags to add to all captured tasks (comma-separated, # optional)").addText(i=>i.setPlaceholder("#captured, #from-paper").setValue(this.plugin.settings.defaultTaskTags).onChange(async n=>{this.plugin.settings.defaultTaskTags=n,await this.plugin.saveSettings()})),e.createEl("p",{text:'\u{1F4A1} How to use: Underline "Tasks" in your handwritten notes, then list tasks below.',cls:"setting-item-description"})),e.createEl("h2",{text:"Platform-Specific Settings"}),new h.Setting(e).setName("Android Camera Mode").setDesc("Choose how to capture images on Android devices").addDropdown(i=>i.addOption("ask","Ask each time").addOption("camera","Direct camera (may not work)").addOption("gallery","Gallery picker (recommended)").setValue(this.plugin.settings.androidCameraMode).onChange(async n=>{this.plugin.settings.androidCameraMode=n,await this.plugin.saveSettings()})),e.createEl("p",{text:"\u{1F4A1} Tip: If camera access fails on Android, use Gallery mode.",cls:"setting-item-description"})}getTriggerUsageDescription(e,t){let s={Research:"Deep research on topics you list below the underlined word.",Expand:"Expands brief notes into detailed, well-structured content.",Summarize:"Creates concise summaries of your content.",Actions:"Extracts and prioritizes all action items with suggested deadlines.",Tasks:"Adds tasks to your Obsidian Tasks note with priority and tags support.",Analyze:"Provides critical analysis including pros, cons, risks and opportunities.",Define:"Provides clear definitions with examples for terms listed below.",Translate:"Translates content to your specified language.",Rewrite:"Rewrites content in a different style (formal, casual, email, etc.).",Questions:"Generates thought-provoking questions to encourage deeper thinking.",Connect:"Identifies connections to related concepts and interdisciplinary links.",Organize:"Organizes content into clear, logical structure with categories.",TagLinks:"Finds and links to other notes with matching tags.",Related:"Same as TagLinks - finds notes with matching tags."};return e==="Summarise"?s.Summarize:e==="Analyse"?s.Analyze:e==="Organise"?s.Organize:s[e]||"Process content"}};
