/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var v=Object.defineProperty;var U=Object.getOwnPropertyDescriptor;var z=Object.getOwnPropertyNames;var V=Object.prototype.hasOwnProperty;var N=(c,l)=>()=>(l||c((l={exports:{}}).exports,l),l.exports),H=(c,l)=>{for(var e in l)v(c,e,{get:l[e],enumerable:!0})},j=(c,l,e,n)=>{if(l&&typeof l=="object"||typeof l=="function")for(let t of z(l))!V.call(c,t)&&t!==e&&v(c,t,{get:()=>l[t],enumerable:!(n=U(l,t))||n.enumerable});return c};var W=c=>j(v({},"__esModule",{value:!0}),c);var A=N(D=>{D.Image={11:"ProcessingSoftware",254:"NewSubfileType",255:"SubfileType",256:"ImageWidth",257:"ImageLength",258:"BitsPerSample",259:"Compression",262:"PhotometricInterpretation",263:"Thresholding",264:"CellWidth",265:"CellLength",266:"FillOrder",269:"DocumentName",270:"ImageDescription",271:"Make",272:"Model",273:"StripOffsets",274:"Orientation",277:"SamplesPerPixel",278:"RowsPerStrip",279:"StripByteCounts",282:"XResolution",283:"YResolution",284:"PlanarConfiguration",285:"PageName",286:"XPosition",287:"YPosition",290:"GrayResponseUnit",291:"GrayResponseCurve",292:"T4Options",293:"T6Options",296:"ResolutionUnit",297:"PageNumber",301:"TransferFunction",305:"Software",306:"DateTime",315:"Artist",316:"HostComputer",317:"Predictor",318:"WhitePoint",319:"PrimaryChromaticities",320:"ColorMap",321:"HalftoneHints",322:"TileWidth",323:"TileLength",324:"TileOffsets",325:"TileByteCounts",330:"SubIFDs",332:"InkSet",333:"InkNames",334:"NumberOfInks",336:"DotRange",337:"TargetPrinter",338:"ExtraSamples",339:"SampleFormat",340:"SMinSampleValue",341:"SMaxSampleValue",342:"TransferRange",343:"ClipPath",344:"XClipPathUnits",345:"YClipPathUnits",346:"Indexed",347:"JPEGTables",351:"OPIProxy",512:"JPEGProc",513:"JPEGInterchangeFormat",514:"JPEGInterchangeFormatLength",515:"JPEGRestartInterval",517:"JPEGLosslessPredictors",518:"JPEGPointTransforms",519:"JPEGQTables",520:"JPEGDCTables",521:"JPEGACTables",529:"YCbCrCoefficients",530:"YCbCrSubSampling",531:"YCbCrPositioning",532:"ReferenceBlackWhite",700:"XMLPacket",18246:"Rating",18249:"RatingPercent",28722:"VignettingCorrParams",28725:"ChromaticAberrationCorrParams",28727:"DistortionCorrParams",32781:"ImageID",33421:"CFARepeatPatternDim",33422:"CFAPattern",33423:"BatteryLevel",33432:"Copyright",33434:"ExposureTime",33437:"FNumber",33723:"IPTCNAA",34377:"ImageResources",34665:"ExifTag",34675:"InterColorProfile",34850:"ExposureProgram",34852:"SpectralSensitivity",34853:"GPSTag",34855:"ISOSpeedRatings",34856:"OECF",34857:"Interlace",34858:"TimeZoneOffset",34859:"SelfTimerMode",36867:"DateTimeOriginal",37122:"CompressedBitsPerPixel",37377:"ShutterSpeedValue",37378:"ApertureValue",37379:"BrightnessValue",37380:"ExposureBiasValue",37381:"MaxApertureValue",37382:"SubjectDistance",37383:"MeteringMode",37384:"LightSource",37385:"Flash",37386:"FocalLength",37387:"FlashEnergy",37388:"SpatialFrequencyResponse",37389:"Noise",37390:"FocalPlaneXResolution",37391:"FocalPlaneYResolution",37392:"FocalPlaneResolutionUnit",37393:"ImageNumber",37394:"SecurityClassification",37395:"ImageHistory",37396:"SubjectLocation",37397:"ExposureIndex",37398:"TIFFEPStandardID",37399:"SensingMethod",40091:"XPTitle",40092:"XPComment",40093:"XPAuthor",40094:"XPKeywords",40095:"XPSubject",50341:"PrintImageMatching",50706:"DNGVersion",50707:"DNGBackwardVersion",50708:"UniqueCameraModel",50709:"LocalizedCameraModel",50710:"CFAPlaneColor",50711:"CFALayout",50712:"LinearizationTable",50713:"BlackLevelRepeatDim",50714:"BlackLevel",50715:"BlackLevelDeltaH",50716:"BlackLevelDeltaV",50717:"WhiteLevel",50718:"DefaultScale",50719:"DefaultCropOrigin",50720:"DefaultCropSize",50721:"ColorMatrix1",50722:"ColorMatrix2",50723:"CameraCalibration1",50724:"CameraCalibration2",50725:"ReductionMatrix1",50726:"ReductionMatrix2",50727:"AnalogBalance",50728:"AsShotNeutral",50729:"AsShotWhiteXY",50730:"BaselineExposure",50731:"BaselineNoise",50732:"BaselineSharpness",50733:"BayerGreenSplit",50734:"LinearResponseLimit",50735:"CameraSerialNumber",50736:"LensInfo",50737:"ChromaBlurRadius",50738:"AntiAliasStrength",50739:"ShadowScale",50740:"DNGPrivateData",50741:"MakerNoteSafety",50778:"CalibrationIlluminant1",50779:"CalibrationIlluminant2",50780:"BestQualityScale",50781:"RawDataUniqueID",50827:"OriginalRawFileName",50828:"OriginalRawFileData",50829:"ActiveArea",50830:"MaskedAreas",50831:"AsShotICCProfile",50832:"AsShotPreProfileMatrix",50833:"CurrentICCProfile",50834:"CurrentPreProfileMatrix",50879:"ColorimetricReference",50931:"CameraCalibrationSignature",50932:"ProfileCalibrationSignature",50933:"ExtraCameraProfiles",50934:"AsShotProfileName",50935:"NoiseReductionApplied",50936:"ProfileName",50937:"ProfileHueSatMapDims",50938:"ProfileHueSatMapData1",50939:"ProfileHueSatMapData2",50940:"ProfileToneCurve",50941:"ProfileEmbedPolicy",50942:"ProfileCopyright",50964:"ForwardMatrix1",50965:"ForwardMatrix2",50966:"PreviewApplicationName",50967:"PreviewApplicationVersion",50968:"PreviewSettingsName",50969:"PreviewSettingsDigest",50970:"PreviewColorSpace",50971:"PreviewDateTime",50972:"RawImageDigest",50973:"OriginalRawFileDigest",50974:"SubTileBlockSize",50975:"RowInterleaveFactor",50981:"ProfileLookTableDims",50982:"ProfileLookTableData",51008:"OpcodeList1",51009:"OpcodeList2",51022:"OpcodeList3",51041:"NoiseProfile",51043:"TimeCodes",51044:"FrameRate",51058:"TStop",51081:"ReelName",51105:"CameraLabel",51089:"OriginalDefaultFinalSize",51090:"OriginalBestQualityFinalSize",51091:"OriginalDefaultCropSize",51107:"ProfileHueSatMapEncoding",51108:"ProfileLookTableEncoding",51109:"BaselineExposureOffset",51110:"DefaultBlackRender",51111:"NewRawImageDigest",51112:"RawToPreviewGain",51125:"DefaultUserCrop",51177:"DepthFormat",51178:"DepthNear",51179:"DepthFar",51180:"DepthUnits",51181:"DepthMeasureType",51182:"EnhanceParams",52525:"ProfileGainTableMap",52526:"SemanticName",52528:"SemanticInstanceID",52529:"CalibrationIlluminant3",52530:"CameraCalibration3",52531:"ColorMatrix3",52532:"ForwardMatrix3",52533:"IlluminantData1",52534:"IlluminantData2",52535:"IlluminantData3",52536:"MaskSubArea",52537:"ProfileHueSatMapData3",52538:"ReductionMatrix3",52539:"RGBTables"};D.Photo={33434:"ExposureTime",33437:"FNumber",34850:"ExposureProgram",34852:"SpectralSensitivity",34855:"ISOSpeedRatings",34856:"OECF",34864:"SensitivityType",34865:"StandardOutputSensitivity",34866:"RecommendedExposureIndex",34867:"ISOSpeed",34868:"ISOSpeedLatitudeyyy",34869:"ISOSpeedLatitudezzz",36864:"ExifVersion",36867:"DateTimeOriginal",36868:"DateTimeDigitized",36880:"OffsetTime",36881:"OffsetTimeOriginal",36882:"OffsetTimeDigitized",37121:"ComponentsConfiguration",37122:"CompressedBitsPerPixel",37377:"ShutterSpeedValue",37378:"ApertureValue",37379:"BrightnessValue",37380:"ExposureBiasValue",37381:"MaxApertureValue",37382:"SubjectDistance",37383:"MeteringMode",37384:"LightSource",37385:"Flash",37386:"FocalLength",37396:"SubjectArea",37500:"MakerNote",37510:"UserComment",37520:"SubSecTime",37521:"SubSecTimeOriginal",37522:"SubSecTimeDigitized",37888:"Temperature",37889:"Humidity",37890:"Pressure",37891:"WaterDepth",37892:"Acceleration",37893:"CameraElevationAngle",40960:"FlashpixVersion",40961:"ColorSpace",40962:"PixelXDimension",40963:"PixelYDimension",40964:"RelatedSoundFile",40965:"InteroperabilityTag",41483:"FlashEnergy",41484:"SpatialFrequencyResponse",41486:"FocalPlaneXResolution",41487:"FocalPlaneYResolution",41488:"FocalPlaneResolutionUnit",41492:"SubjectLocation",41493:"ExposureIndex",41495:"SensingMethod",41728:"FileSource",41729:"SceneType",41730:"CFAPattern",41985:"CustomRendered",41986:"ExposureMode",41987:"WhiteBalance",41988:"DigitalZoomRatio",41989:"FocalLengthIn35mmFilm",41990:"SceneCaptureType",41991:"GainControl",41992:"Contrast",41993:"Saturation",41994:"Sharpness",41995:"DeviceSettingDescription",41996:"SubjectDistanceRange",42016:"ImageUniqueID",42032:"CameraOwnerName",42033:"BodySerialNumber",42034:"LensSpecification",42035:"LensMake",42036:"LensModel",42037:"LensSerialNumber",42080:"CompositeImage",42081:"SourceImageNumberOfCompositeImage",42082:"SourceExposureTimesOfCompositeImage",42240:"Gamma"};D.Iop={1:"InteroperabilityIndex",2:"InteroperabilityVersion",4096:"RelatedImageFileFormat",4097:"RelatedImageWidth",4098:"RelatedImageLength"};D.GPSInfo={0:"GPSVersionID",1:"GPSLatitudeRef",2:"GPSLatitude",3:"GPSLongitudeRef",4:"GPSLongitude",5:"GPSAltitudeRef",6:"GPSAltitude",7:"GPSTimeStamp",8:"GPSSatellites",9:"GPSStatus",10:"GPSMeasureMode",11:"GPSDOP",12:"GPSSpeedRef",13:"GPSSpeed",14:"GPSTrackRef",15:"GPSTrack",16:"GPSImgDirectionRef",17:"GPSImgDirection",18:"GPSMapDatum",19:"GPSDestLatitudeRef",20:"GPSDestLatitude",21:"GPSDestLongitudeRef",22:"GPSDestLongitude",23:"GPSDestBearingRef",24:"GPSDestBearing",25:"GPSDestDistanceRef",26:"GPSDestDistance",27:"GPSProcessingMethod",28:"GPSAreaInformation",29:"GPSDateStamp",30:"GPSDifferential",31:"GPSHPositioningError"}});var R=N((ae,G)=>{var S=A();G.exports=function(c){var l=0;if(c.toString("ascii",0,3)!=="MM\0"&&c.toString("ascii",0,3)!=="II*"&&(l=6,c.toString("ascii",0,5)!=="Exif\0"))throw new Error('Invalid EXIF data: buffer should start with "Exif", "MM" or "II".');var e=null;if(c[l]===73&&c[l+1]===73)e=!1;else if(c[l]===77&&c[l+1]===77)e=!0;else throw new Error("Invalid EXIF data: expected byte order marker.");if(c.length<l+4||T(c,l+2,e)!==42)throw new Error("Invalid EXIF data: expected 0x002A.");if(c.length<=l+8)throw new Error("Invalid EXIF data: Ends before ifdOffset");var n=P(c,l+4,e)+l;if(n<8)throw new Error("Invalid EXIF data: ifdOffset < 8");var t={bigEndian:e};if(t.Image=C(c,n,e,S.Image,l),c.length>=n+2){var s=T(c,n,e);c.length>=n+2+s*12+4&&(n=P(c,n+2+s*12,e),n!==0&&(t.Thumbnail=C(c,n+l,e,S.Image,l)))}return t.Image&&(E(t.Image.ExifTag)&&(t.Photo=C(c,t.Image.ExifTag+l,e,S.Photo,l)),E(t.Image.GPSTag)&&(t.GPSInfo=C(c,t.Image.GPSTag+l,e,S.GPSInfo,l))),t.Photo&&E(t.Photo.InteroperabilityTag)&&(t.Iop=C(c,t.Photo.InteroperabilityTag+l,e,S.Iop,l)),t};var q={DateTimeOriginal:!0,DateTimeDigitized:!0,DateTime:!0};function C(c,l,e,n,t){if(c.length<l+2)return null;var s=T(c,l,e);l+=2;for(var a={},i=0;i<s;i++){if(c.length>=l+2)var o=T(c,l,e);else return null;l+=2;var d=n[o]||o,r=X(c,l,e,t);d in q&&(r=J(r)),a[d]=r,l+=10}return a}var F=[1,1,2,4,8,1,1,2,4,8];function X(c,l,e,n){if(c.length<l+7)return null;var t=T(c,l,e);if(!t||t>F.length)return null;var s=P(c,l+2,e),a=F[t-1],i;if(a*s<=4)i=l+6;else if(c.length>=l+10)i=P(c,l+6,e)+n;else return null;if(t===2){var o=c.slice(i,i+s);if(o.some(p=>p>>7>0))return o;var d=o.toString("ascii");return d[d.length-1]==="\0"&&(d=d.slice(0,-1)),d}if(t===7)return c.slice(i,i+s);if(s===1)return Y(c,i,e,t);for(var r=[],g=0;g<s&&i<c.length;g++)r.push(Y(c,i,e,t)),i+=a;return r}function Y(c,l,e,n){switch(n){case 1:return c.length<l+1?null:c[l];case 3:return c.length<l+2?null:T(c,l,e);case 4:return c.length<l+4?null:P(c,l,e);case 5:return c.length<l+8?null:P(c,l,e)/P(c,l+4,e);case 6:return c.length<l+1?null:c.readInt8(l);case 8:return c.length<l+2?null:_(c,l,e);case 9:return c.length<l+4?null:M(c,l,e);case 10:return c.length<l+8?null:M(c,l,e)/M(c,l+4,e)}}function J(c){if(typeof c!="string")return null;var l=c.match(/^(\d{4}):(\d{2}):(\d{2}) (\d{2}):(\d{2}):(\d{2})$/);return l?new Date(Date.UTC(l[1],l[2]-1,l[3],l[4],l[5],l[6],0)):null}function E(c){return typeof c=="number"&&Math.floor(c)===c&&c>0}function T(c,l,e){return e?c.readUInt16BE(l):c.readUInt16LE(l)}function P(c,l,e){return e?c.readUInt32BE(l):c.readUInt32LE(l)}function _(c,l,e){return e?c.readInt16BE(l):c.readInt16LE(l)}function M(c,l,e){return e?c.readInt32BE(l):c.readInt32LE(l)}});var ee={};H(ee,{default:()=>I});module.exports=W(ee);var m=require("obsidian"),K=R();function Q(c){let l="",e=new Uint8Array(c),n=e.byteLength;for(let t=0;t<n;t++)l+=String.fromCharCode(e[t]);return window.btoa(l)}var $=[{keyword:"Research",action:"research",requiresList:!0,enabled:!0},{keyword:"Expand",action:"expand",requiresList:!1,enabled:!0},{keyword:"Summarize",action:"summarize",requiresList:!1,enabled:!0},{keyword:"Summarise",action:"summarize",requiresList:!1,enabled:!0},{keyword:"Actions",action:"actions",requiresList:!1,enabled:!0},{keyword:"Tasks",action:"tasks",requiresList:!0,enabled:!0},{keyword:"Analyze",action:"analyze",requiresList:!1,enabled:!0},{keyword:"Analyse",action:"analyze",requiresList:!1,enabled:!0},{keyword:"Define",action:"define",requiresList:!0,enabled:!0},{keyword:"Translate",action:"translate",requiresList:!1,enabled:!0},{keyword:"Rewrite",action:"rewrite",requiresList:!1,enabled:!0},{keyword:"Questions",action:"questions",requiresList:!1,enabled:!0},{keyword:"Connect",action:"connect",requiresList:!1,enabled:!0},{keyword:"Organise",action:"organize",requiresList:!1,enabled:!0},{keyword:"Organize",action:"organize",requiresList:!1,enabled:!0},{keyword:"TagLinks",action:"taglinks",requiresList:!1,enabled:!0},{keyword:"Related",action:"related",requiresList:!1,enabled:!0}],O=`You are an expert note-processing assistant integrated into Obsidian. I am providing you with an image of a handwritten note. 
Perform the following tasks and format your response *exactly* as specified below, using Markdown. 
Do not include any other text, headers, or pleasantries in your response.

IMPORTANT: When transcribing, preserve formatting indicators:
- If a word appears underlined in the handwriting, format it as <u>word</u>
- Maintain numbered or bulleted lists exactly as they appear
- Keep the exact structure and organization of the original note

### Transcript
[Provide a full, verbatim transcript of the text in the image here, preserving all formatting indicators as specified above.]

### Summary
[Provide a concise bullet-point summary of the key points.]

### Tasks
[Extract any actionable tasks or to-do items from the note. Format each as a checkbox item using "- [ ]" followed by the task description. 
Include any time indicators mentioned with the task:
- If a due date is mentioned (e.g., "by Friday", "due tomorrow", "by tonight", "before June 1"), include it as "DUE: [date]"
- If a scheduled/planned date is mentioned (e.g., "scheduled for Monday", "on the 15th"), include it as "SCHEDULED: [date]"
- If a start date is mentioned (e.g., "start next week", "begin in January"), include it as "START: [date]"
- If priority is indicated (!, !!, !!!), include it at the beginning
Example format: "- [ ] !!! Task description DUE: tomorrow SCHEDULED: Monday"
If no tasks are found, write "None identified."]

### Detected Tags
[Identify any hashtags (e.g., #idea, #meeting) in the text. List them here as a comma-separated list, without the '#' symbol. For example: idea, meeting, project-alpha. If none are found, write "None identified."]`,Z={geminiApiKey:"",selectedModel:"gemini-2.5-flash",customTags:"sketchnote, from-notebook",enableDeepResearch:!1,newNoteLocation:"Gemini Scans/YYYY",attachmentLocation:"Gemini Scans/YYYY/Attachments",enableLocationTagging:!1,fallbackToCurrentLocation:!1,enableTriggerWords:!1,researchResponseLength:"moderate",triggerActions:$,notebooks:[],currentNotebookId:"",autoIncrementPage:!0,insertPageNumbers:!0,groupByNotebook:!0,notebookFolderPattern:"Notebooks/{notebook}",androidCameraMode:"ask",enableTasksIntegration:!1,tasksNotePath:"Tasks/Inbox.md",tasksSectionHeading:"## Captured Tasks",taskPriorities:!0,defaultTaskTags:"#captured",geminiPrompt:O},I=class extends m.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new L(this.app,this)),this.addRibbonIcon("camera","Create note from camera or file",()=>{this.createNoteFromImageCapture()}),this.registerEvent(this.app.workspace.on("file-menu",(e,n)=>{!(n instanceof m.TFile)||!n.path.match(/\.(png|jpg|jpeg|gif)$/i)||e.addItem(t=>{t.setTitle("Process note with Gemini").setIcon("sparkle").onClick(async()=>{this.processImageInCurrentNote(n)})})}))}onunload(){}async loadSettings(){let e=await this.loadData();this.settings=Object.assign({},Z,e),this.settings.triggerActions||(this.settings.triggerActions=$),this.settings.notebooks||(this.settings.notebooks=[]),this.settings.enableTasksIntegration===void 0&&(this.settings.enableTasksIntegration=!1),this.settings.tasksNotePath||(this.settings.tasksNotePath="Tasks/Inbox.md"),this.settings.tasksSectionHeading||(this.settings.tasksSectionHeading="## Captured Tasks"),this.settings.taskPriorities===void 0&&(this.settings.taskPriorities=!0),this.settings.defaultTaskTags||(this.settings.defaultTaskTags="#captured"),(!this.settings.geminiPrompt||this.settings.geminiPrompt.trim()==="")&&(console.log("Initializing Gemini prompt to default"),this.settings.geminiPrompt=O,await this.saveSettings())}async saveSettings(){await this.saveData(this.settings)}async getNotebookFolder(e){let n=this.settings.notebooks.find(s=>s.id===e);if(!n)return this.settings.newNoteLocation;let t=this.settings.notebookFolderPattern;return t=t.replace("{notebook}",n.name.replace(/[\\/:*?"<>|]/g,"-")),t=t.replace(/YYYY/g,window.moment().format("YYYY")),t=t.replace(/MM/g,window.moment().format("MM")),t=t.replace(/DD/g,window.moment().format("DD")),t}createNotebook(){return{id:Date.now().toString(),name:`Notebook ${this.settings.notebooks.length+1}`,startDate:new Date().toISOString(),currentPage:1,status:"active",description:""}}async showNotebookSelectionModal(){if(this.settings.notebooks.length===0){new m.Notice("No notebooks found. Creating a default notebook...");let e=this.createNotebook();e.name="My Notebook",this.settings.notebooks.push(e),await this.saveSettings()}return new Promise(e=>{let n=new m.Modal(this.app);n.titleEl.setText("Select Notebook");let t=null,s=null,a=n.contentEl.createDiv();a.createEl("p",{text:"Which notebook is this page from?",cls:"setting-item-description"});let i=a.createDiv({cls:"setting-item"});i.createEl("label",{text:"Notebook:"});let o=i.createEl("select",{cls:"dropdown"});o.createEl("option",{value:"",text:"\u{1F4C4} Loose paper / No notebook"});let d=this.settings.notebooks.filter(x=>x.status==="active");if(d.length>0){let x=o.createEl("optgroup",{attr:{label:"Active Notebooks"}});d.forEach(b=>{x.createEl("option",{value:b.id,text:`\u{1F4D3} ${b.name} (Current page: ${b.currentPage})`})})}let r=this.settings.notebooks.filter(x=>x.status==="completed");if(r.length>0){let x=o.createEl("optgroup",{attr:{label:"Completed Notebooks"}});r.forEach(b=>{x.createEl("option",{value:b.id,text:`\u{1F4D5} ${b.name} (Completed)`})})}this.settings.currentNotebookId&&(o.value=this.settings.currentNotebookId,t=this.settings.notebooks.find(x=>x.id===this.settings.currentNotebookId)||null);let g=a.createDiv({cls:"setting-item"});g.style.display=t?"flex":"none",g.createEl("label",{text:"Page number:"});let p=g.createEl("input",{type:"number",attr:{min:"1",placeholder:"Enter page number"}});t&&(p.value=t.currentPage.toString(),s=t.currentPage);let u=a.createDiv({cls:"setting-item"});u.style.display=t?"flex":"none";let f=u.createEl("input",{type:"checkbox",attr:{id:"auto-increment-check"}});f.checked=this.settings.autoIncrementPage;let h=u.createEl("label",{text:" Auto-increment page number after capture",attr:{for:"auto-increment-check"}});h.style.marginLeft="5px",o.addEventListener("change",()=>{let x=o.value;x?(t=this.settings.notebooks.find(b=>b.id===x)||null,t&&(g.style.display="flex",u.style.display="flex",p.value=t.currentPage.toString(),s=t.currentPage)):(t=null,s=null,g.style.display="none",u.style.display="none")}),p.addEventListener("input",()=>{let x=parseInt(p.value);!isNaN(x)&&x>0&&(s=x)});let y=a.createDiv({cls:"modal-button-container"});y.createEl("button",{text:"Cancel"}).addEventListener("click",()=>{n.close(),e({notebook:null,pageNumber:null,cancelled:!0})}),y.createEl("button",{text:"Capture Image",cls:"mod-cta"}).addEventListener("click",async()=>{t&&s&&f.checked&&(t.currentPage=s+1),t&&(this.settings.currentNotebookId=t.id),await this.saveSettings(),n.close(),e({notebook:t,pageNumber:s,cancelled:!1})}),n.open()})}async getCurrentCoords(){return new Promise(e=>{if(!navigator.geolocation){e(null);return}navigator.geolocation.getCurrentPosition(n=>e({latitude:n.coords.latitude,longitude:n.coords.longitude}),n=>{console.error("Geolocation error:",n),e(null)},{enableHighAccuracy:!1,timeout:5e3,maximumAge:6e5})})}async getCountryFromCoords(e,n){var t;try{let a=(await(0,m.requestUrl)({url:`https://nominatim.openstreetmap.org/reverse?format=json&lat=${e}&lon=${n}&zoom=3&accept-language=en`,method:"GET",headers:{"User-Agent":"Obsidian-Gemini-Note-Processor/1.0"}})).json;if((t=a==null?void 0:a.address)!=null&&t.country)return a.address.country.toLowerCase().replace(/\s+/g,"-")}catch(s){console.error("Reverse geocoding failed:",s)}return null}async extractLocationFromImage(e){console.log("=== Starting EXIF Location Extraction ==="),console.log("Image data size:",e.byteLength,"bytes");try{let n=Buffer.from(e);console.log("Buffer created, size:",n.length);let t=K(n);if(console.log("EXIF data parsed successfully"),console.log("Full EXIF data structure:",JSON.stringify(t,null,2)),t){if(console.log("Top-level EXIF keys:",Object.keys(t)),t.gps){if(console.log("Found gps object:",t.gps),console.log("GPS object keys:",Object.keys(t.gps)),t.gps.Latitude&&t.gps.Longitude){console.log("GPS Latitude:",t.gps.Latitude),console.log("GPS Longitude:",t.gps.Longitude);let s=await this.getCountryFromCoords(t.gps.Latitude,t.gps.Longitude);if(s)return new m.Notice(`Location from photo: ${s}`),s}if(t.gps.GPSLatitude&&t.gps.GPSLongitude){console.log("Found GPSLatitude/GPSLongitude fields"),console.log("GPSLatitude:",t.gps.GPSLatitude),console.log("GPSLongitude:",t.gps.GPSLongitude);let s=this.convertDMSToDD(t.gps.GPSLatitude,t.gps.GPSLatitudeRef),a=this.convertDMSToDD(t.gps.GPSLongitude,t.gps.GPSLongitudeRef);if(s&&a){console.log("Converted coordinates - Lat:",s,"Lon:",a);let i=await this.getCountryFromCoords(s,a);if(i)return new m.Notice(`Location from photo: ${i}`),i}}}if(t.GPSLatitude&&t.GPSLongitude){console.log("GPS data found at root level"),console.log("GPSLatitude:",t.GPSLatitude),console.log("GPSLongitude:",t.GPSLongitude);let s=this.convertDMSToDD(t.GPSLatitude,t.GPSLatitudeRef),a=this.convertDMSToDD(t.GPSLongitude,t.GPSLongitudeRef);if(s&&a){console.log("Converted coordinates - Lat:",s,"Lon:",a);let i=await this.getCountryFromCoords(s,a);if(i)return new m.Notice(`Location from photo: ${i}`),i}}if(t.latitude&&t.longitude){console.log("Found decimal coordinates at root"),console.log("Latitude:",t.latitude),console.log("Longitude:",t.longitude);let s=await this.getCountryFromCoords(t.latitude,t.longitude);if(s)return new m.Notice(`Location from photo: ${s}`),s}console.log("No recognizable GPS data format found in EXIF")}else console.log("EXIF data is null or undefined")}catch(n){console.error("Error parsing EXIF data:",n),console.error("Error stack:",n.stack),console.log("Attempting alternative EXIF extraction method...");try{let t=this.extractGPSFromJPEG(e);if(t){console.log("Alternative method found GPS:",t);let s=await this.getCountryFromCoords(t.latitude,t.longitude);if(s)return new m.Notice(`Location from photo: ${s}`),s}}catch(t){console.error("Alternative EXIF extraction also failed:",t)}}if(this.settings.fallbackToCurrentLocation){console.log("No GPS in photo, falling back to current location...");let n=await this.getCurrentCoords();if(n){console.log("Current location:",n);let t=await this.getCountryFromCoords(n.latitude,n.longitude);if(t)return new m.Notice(`Using current location: ${t}`),t}else console.log("Could not get current location")}return console.log("=== Location extraction completed, no location found ==="),null}convertDMSToDD(e,n){if(console.log("Converting DMS to DD:",e,"Ref:",n),!e||!Array.isArray(e)||e.length<3)return console.log("Invalid DMS format"),null;try{let t=e[0]+e[1]/60+e[2]/3600;return(n==="S"||n==="W")&&(t=-t),console.log("Converted to decimal degrees:",t),t}catch(t){return console.error("Error converting DMS to DD:",t),null}}extractGPSFromJPEG(e){console.log("Attempting manual JPEG EXIF extraction...");try{let n=new DataView(e);if(n.getUint16(0)!==65496)return console.log("Not a JPEG file"),null;let t=2,s;for(;t<n.byteLength;){if(s=n.getUint16(t),s===65505){console.log("Found EXIF marker at offset:",t);let a=n.getUint16(t+2);if(console.log("EXIF segment length:",a),n.getUint32(t+4)===1165519206&&n.getUint16(t+8)===0){console.log("Valid EXIF header found");let i=t+10,o=n.getUint16(i)===18761;console.log("Byte order:",o?"Little Endian":"Big Endian"),console.log("Found valid EXIF data, but full parsing not implemented")}break}if((s&65280)===65280&&s!==65280){let a=n.getUint16(t+2);t+=2+a}else t+=1}s!==65505&&console.log("No EXIF data found in JPEG")}catch(n){console.error("Error in manual JPEG EXIF extraction:",n)}return null}async processImageInCurrentNote(e){var n;if(!this.settings.geminiApiKey){new m.Notice("Gemini API key is not set.");return}new m.Notice("Processing with Gemini...");try{let t=await this.app.vault.readBinary(e),s=await this.callGeminiAPI(t);if(!s)throw new Error("API call returned no text.");this.settings.enableTriggerWords&&(s=await this.processTriggersInText(s));let a=null;this.settings.enableLocationTagging&&(a=await this.extractLocationFromImage(t));let i=this.app.workspace.getActiveFile();if(i){let d=this.parseDetectedTags(s);await this.updateNoteProperties(e,i,d,a,null,null)}let o=(n=this.app.workspace.activeEditor)==null?void 0:n.editor;if(s&&o){let d=o.getCursor(),r=o.getLine(d.line);o.replaceRange(`

---
${s}
---`,{line:d.line,ch:r.length}),new m.Notice("Note processed successfully!")}}catch(t){console.error("Error during image processing:",t),new m.Notice("Failed to process image. Check console.")}}async captureFromAndroidCamera(){if(this.settings.androidCameraMode==="ask"){let e=await this.showAndroidCameraModeModal();if(!e)return null;this.settings.androidCameraMode=e,await this.saveSettings()}return this.settings.androidCameraMode==="gallery"?null:new Promise(e=>{let n=new m.Modal(this.app);n.titleEl.setText("Camera Capture");let t=n.contentEl.createDiv({cls:"camera-container"});t.style.cssText="position: relative; width: 100%; max-width: 500px; margin: 0 auto;";let s=t.createEl("video",{attr:{autoplay:!0,playsinline:!0},cls:"camera-video"});s.style.cssText="width: 100%; height: auto; border-radius: 8px;";let a=document.createElement("canvas"),i=a.getContext("2d"),o=n.contentEl.createDiv({cls:"camera-buttons"});o.style.cssText="display: flex; gap: 10px; justify-content: center; margin-top: 15px;";let d=o.createEl("button",{text:"\u{1F4F8} Capture",cls:"mod-cta"});d.disabled=!0;let r=o.createEl("button",{text:"\u{1F5BC}\uFE0F Use Gallery Instead"}),g=o.createEl("button",{text:"Cancel"}),p=null;if(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia){t.style.display="none",d.style.display="none";let u=n.contentEl.createDiv({cls:"camera-error"});u.style.cssText="padding: 20px; text-align: center;",u.innerHTML=`
                    <h3>Camera Not Available</h3>
                    <p>Direct camera access is not supported in this version of Obsidian.</p>
                    <p>Click "Use Gallery Instead" to select a photo from your device.</p>
                `,n.open(),r.onclick=()=>{n.close(),e(null)},g.onclick=()=>{n.close(),e(null)};return}navigator.mediaDevices.getUserMedia({video:{facingMode:"environment",width:{ideal:1920},height:{ideal:1080}},audio:!1}).then(u=>{p=u,s.srcObject=p,d.disabled=!1,r.style.display="none"}).catch(u=>{console.error("Camera access failed:",u),t.style.display="none",d.style.display="none";let f=n.contentEl.createDiv({cls:"camera-error"});f.style.cssText="padding: 20px; text-align: center;";let h="<h3>Camera Access Issue</h3>";u.name==="NotAllowedError"||u.name==="PermissionDeniedError"?h+=`
                        <div style="background: var(--background-modifier-error-hover); padding: 15px; border-radius: 8px; margin: 15px 0;">
                            <p><strong>\u26A0\uFE0F Known Android Limitation</strong></p>
                            <p>Obsidian on Android may not have camera permission available.</p>
                        </div>
                        <p><strong>Recommended Solution:</strong></p>
                        <p>Use "Gallery" mode to take photos with your camera app, then select them.</p>
                        <div style="margin-top: 20px;">
                            <button class="mod-cta" id="switch-to-gallery">Switch to Gallery Mode</button>
                        </div>
                        <details style="margin-top: 20px; text-align: left;">
                            <summary style="cursor: pointer; font-weight: bold;">Advanced: Try to Fix Camera Access</summary>
                            <ol style="margin-top: 10px;">
                                <li>Go to Android <strong>Settings \u2192 Apps \u2192 Obsidian</strong></li>
                                <li>Check if "Camera" permission exists</li>
                                <li>If it doesn't exist, camera access is not available</li>
                                <li>If it exists but is disabled, enable it and restart Obsidian</li>
                            </ol>
                        </details>
                    `:u.name==="NotFoundError"||u.name==="DevicesNotFoundError"?h+="<p>No camera was detected on your device.</p>":u.name==="NotReadableError"||u.name==="TrackStartError"?h+="<p>The camera is already in use by another application. Please close it and try again.</p>":h+=`<p>Camera error: ${u.message||u.name}</p>
                        <p>Try using Gallery mode instead.</p>`,f.innerHTML=h,setTimeout(()=>{let y=n.contentEl.querySelector("#switch-to-gallery");y&&y.addEventListener("click",async()=>{this.settings.androidCameraMode="gallery",await this.saveSettings(),n.close(),e(null)})},0)}),d.onclick=async()=>{!i||!p||(a.width=s.videoWidth,a.height=s.videoHeight,i.drawImage(s,0,0),a.toBlob(async u=>{if(u){let f=await u.arrayBuffer();p==null||p.getTracks().forEach(h=>h.stop()),n.close(),e(f)}else e(null)},"image/jpeg",.9))},r.onclick=()=>{p==null||p.getTracks().forEach(u=>u.stop()),n.close(),e(null)},g.onclick=()=>{p==null||p.getTracks().forEach(u=>u.stop()),n.close(),e(null)},n.onClose=()=>{p==null||p.getTracks().forEach(u=>u.stop())},n.open()})}async showAndroidCameraModeModal(){return new Promise(e=>{let n=new m.Modal(this.app);n.titleEl.setText("Choose Capture Method");let t=n.contentEl;t.style.cssText="text-align: center;",t.createEl("p",{text:"How would you like to capture images on Android?",cls:"setting-item-description"});let s=t.createDiv();s.style.cssText="margin: 20px 0;";let a=s.createDiv({cls:"capture-option"});a.style.cssText="padding: 15px; margin: 10px; border: 1px solid var(--background-modifier-border); border-radius: 8px; cursor: pointer;",a.innerHTML=`
                <h4>\u{1F4F8} Direct Camera</h4>
                <p style="font-size: 0.9em; opacity: 0.8;">Try to use camera directly in Obsidian</p>
                <p style="font-size: 0.8em; color: var(--text-warning);">\u26A0\uFE0F May not work on all Android devices</p>
            `;let i=s.createDiv({cls:"capture-option"});i.style.cssText="padding: 15px; margin: 10px; border: 2px solid var(--interactive-accent); border-radius: 8px; cursor: pointer; background: var(--background-modifier-hover);",i.innerHTML=`
                <h4>\u{1F5BC}\uFE0F Gallery (Recommended)</h4>
                <p style="font-size: 0.9em; opacity: 0.8;">Use your camera app, then select the photo</p>
                <p style="font-size: 0.8em; color: var(--text-success);">\u2713 Works on all devices</p>
            `,a.onclick=()=>{n.close(),e("camera")},i.onclick=()=>{n.close(),e("gallery")};let o=t.createEl("button",{text:"Cancel"});o.style.cssText="margin-top: 10px;",o.onclick=()=>{n.close(),e(null)},n.open()})}async createNoteFromImageCapture(){if(!this.settings.geminiApiKey){new m.Notice("Gemini API key is not set.");return}let{notebook:e,pageNumber:n,cancelled:t}=await this.showNotebookSelectionModal();if(t)return;let s=/Android/i.test(navigator.userAgent),a=null,i="captured-image.jpg";if(s&&this.settings.androidCameraMode!=="gallery"&&(a=await this.captureFromAndroidCamera(),!a&&this.settings.androidCameraMode==="camera"&&new m.Notice("Camera access failed. Falling back to gallery...")),!a){let o=await new Promise(d=>{let r=document.createElement("input");r.type="file",r.accept="image/*",(/iPhone|iPad|iPod/i.test(navigator.userAgent)||s&&this.settings.androidCameraMode==="camera")&&(r.capture="environment"),r.style.display="none",document.body.appendChild(r),r.onchange=()=>{d(r.files?r.files[0]:null),document.body.removeChild(r)},r.addEventListener("cancel",()=>{document.body.removeChild(r),d(null)}),r.click()});o&&(a=await o.arrayBuffer(),i=o.name)}if(!a){console.log("No image data received, aborting process.");return}await this.processCapturedImage(a,i,e,n)}async processCapturedImage(e,n,t,s){var a;new m.Notice("Uploading and processing image...");try{let i="";t&&this.settings.groupByNotebook?i=await this.getAndEnsureFolder(await this.getNotebookFolder(t.id)):i=await this.getAndEnsureFolder(this.settings.newNoteLocation);let o=await this.getAndEnsureFolder(this.settings.attachmentLocation),d=((a=n.split(".").pop())==null?void 0:a.toLowerCase())||"jpg",r=`GeminiCapture-${Date.now()}.${d}`,g=`${o}/${r}`,p=await this.app.vault.createBinary(g,e),u=await this.callGeminiAPI(e);if(!u)throw new Error("API call returned no text.");this.settings.enableTriggerWords&&(u=await this.processTriggersInText(u));let f=this.parseDetectedTags(u),h=null;this.settings.enableLocationTagging&&(h=await this.extractLocationFromImage(e));let y=window.moment().format("YYYY-MM-DD HH-mm-ss"),w;t&&s?w=`Page ${s} - ${y}.md`:w=`Note ${y}.md`;let k=`${i}/${w}`,x=`![[${p.path}]]
`;t&&s?x+=`
> **Notebook:** ${t.name} | **Page:** ${s}
`:t||(x+=`
> **Source:** Loose paper / No notebook
`),x+=`
---
${u}
---`;let b=await this.app.vault.create(k,x);await this.updateNoteProperties(p,b,f,h,(t==null?void 0:t.id)||null,s),this.app.workspace.openLinkText(b.path,"",!0),new m.Notice("New note created successfully!")}catch(i){console.error("Error creating note from image:",i),new m.Notice("Failed to create note. See console.")}}async findRelatedNotesByTags(e){var o;if(!e||e.length===0)return"No tags found to search for related notes.";let n=this.app.vault.getMarkdownFiles(),t=this.app.workspace.getActiveFile(),s=new Map;for(let d of n){if(t&&d.path===t.path)continue;let r=this.app.metadataCache.getFileCache(d);if(!((o=r==null?void 0:r.frontmatter)!=null&&o.tags))continue;let g=Array.isArray(r.frontmatter.tags)?r.frontmatter.tags:[r.frontmatter.tags],p=e.filter(u=>g.includes(u));p.length>0&&s.set(d.path,{file:d,matchedTags:p,matchCount:p.length})}if(s.size===0)return"No related notes found with matching tags.";let a=Array.from(s.values()).sort((d,r)=>r.matchCount-d.matchCount).slice(0,10),i=`### Related Notes by Tags

`;i+=`Found ${s.size} related notes. Showing top ${Math.min(10,s.size)}:

`;for(let d of a){let r=`[[${d.file.basename}]]`,g=d.matchedTags.map(p=>`#${p}`).join(", ");i+=`- ${r} (${d.matchCount} matching tags: ${g})
`}return i}async processTriggersInText(e){let n=this.detectTriggerWords(e),t=!1;console.log(`Found ${n.length} triggers in text`);let s=n.find(i=>i.action.keyword==="Tasks");if(s&&this.settings.enableTasksIntegration){console.log("Tasks trigger found with content:",s.content);let i=await this.addTasksToTasksNote(s.content);i>0?(t=!0,new m.Notice(`Added ${i} tasks to ${this.settings.tasksNotePath}`)):console.log("No tasks were added (returned 0)")}if(n.length===0)return e;let a=[];for(let i of n){if(i.action.keyword==="Tasks"&&t){a.push(`### Tasks
\u2705 ${i.content.split(`
`).filter(d=>d.trim()).length} tasks added to [[${this.settings.tasksNotePath.replace(".md","")}]]`);continue}if(i.action.action==="taglinks"||i.action.action==="related"){new m.Notice("Finding related notes by tags...");let d=this.parseDetectedTags(e),r=await this.findRelatedNotesByTags(d);a.push(r);continue}new m.Notice(`Processing trigger: ${i.trigger}...`);let o=await this.processTriggerWithGemini(i);o&&a.push(o)}return a.length>0?`${e}

---
## Triggered Actions

${a.join(`

`)}`:e}async addTasksToTasksNote(e){try{let n=this.parseTasksForObsidianTasks(e);if(n.length===0)return console.log("No tasks parsed from content"),0;console.log(`Parsed ${n.length} tasks:`,n);let t=this.app.vault.getAbstractFileByPath(this.settings.tasksNotePath);if(!t){console.log(`Tasks file not found at ${this.settings.tasksNotePath}, creating...`);let g=this.settings.tasksNotePath.substring(0,this.settings.tasksNotePath.lastIndexOf("/"));g&&!await this.app.vault.adapter.exists(g)&&(console.log(`Creating folder: ${g}`),await this.app.vault.createFolder(g));let p=`# Tasks

${this.settings.tasksSectionHeading}
`;console.log("Creating tasks file with initial content"),t=await this.app.vault.create(this.settings.tasksNotePath,p)}if(!(t instanceof m.TFile))return console.error("Tasks file is not a TFile instance"),0;let s=await this.app.vault.read(t);console.log("Current tasks file content length:",s.length);let a=new RegExp(`^${this.settings.tasksSectionHeading}`,"gm"),i=s.match(a),o=n.map(g=>this.formatTaskForObsidianTasks(g)).join(`
`),r=`
### Captured ${window.moment().format("YYYY-MM-DD HH:mm")}

${o}
`;if(console.log("Tasks block to add:",r),i){let g=s.indexOf(i[0])+i[0].length;s=s.slice(0,g)+r+s.slice(g)}else s+=`

${this.settings.tasksSectionHeading}${r}`;return console.log("Writing updated content to tasks file..."),await this.app.vault.modify(t,s),console.log(`Successfully added ${n.length} tasks to ${this.settings.tasksNotePath}`),n.length}catch(n){return console.error("Error adding tasks to tasks note:",n),new m.Notice(`Error adding tasks: ${n.message}`),0}}parseTasksForObsidianTasks(e){let n=[],t=e.split(`
`);console.log(`Parsing tasks from ${t.length} lines of content`);for(let s of t){let a=s.trim();if(!a)continue;console.log(`Processing line: "${a}"`);let i="",o=a,d={};o=o.replace(/^[-*•]\s*/,""),o.match(/^!!!|^HIGH:/i)?(i="\u23EB",o=o.replace(/^(!!!|HIGH:)/i,"").trim()):o.match(/^!!|^MEDIUM:/i)?(i="\u{1F53C}",o=o.replace(/^(!!|MEDIUM:)/i,"").trim()):o.match(/^!|^LOW:/i)&&(i="\u{1F53D}",o=o.replace(/^(!|LOW:)/i,"").trim());let r=o.match(/\b(?:by|due)\s+(tomorrow|today|monday|tuesday|wednesday|thursday|friday|saturday|sunday|next\s+\w+|[\w\s]+?)(?=\s*[-,]|\s*$)/i);if(r){let h=this.parseNaturalDate(r[1]);h&&(d.due=h,o=o.replace(r[0],"").trim())}let g=o.match(/\b(?:scheduled|on)\s+(tomorrow|today|monday|tuesday|wednesday|thursday|friday|saturday|sunday|next\s+\w+|[\w\s]+?)(?=\s*[-,]|\s*$)/i);if(g){let h=this.parseNaturalDate(g[1]);h&&(d.scheduled=h,o=o.replace(g[0],"").trim())}let p=o.match(/\b(?:start|begin|starting)\s+(tomorrow|today|monday|tuesday|wednesday|thursday|friday|saturday|sunday|next\s+\w+|[\w\s]+?)(?=\s*[-,]|\s*$)/i);if(p){let h=this.parseNaturalDate(p[1]);h&&(d.start=h,o=o.replace(p[0],"").trim())}let u=[],f=o.match(/#[\w-]+/g);if(f&&(u.push(...f),o=o.replace(/#[\w-]+/g,"").trim()),this.settings.defaultTaskTags){let h=this.settings.defaultTaskTags.split(",").map(y=>{let w=y.trim();return w.startsWith("#")?w:"#"+w});u.push(...h)}o=o.replace(/[,\-]+$/,"").trim(),o&&(console.log(`Added task: "${o}" with priority: "${i}" and dates:`,d),n.push({text:o,priority:i,tags:[...new Set(u)],dates:Object.keys(d).length>0?d:void 0}))}return console.log(`Parsed ${n.length} total tasks`),n}formatTaskForObsidianTasks(e){let n="- [ ] ";return this.settings.taskPriorities&&e.priority&&(n+=e.priority+" "),n+=e.text,e.dates&&(e.dates.due&&(n+=` \u{1F4C5} ${e.dates.due}`),e.dates.scheduled&&(n+=` \u23F3 ${e.dates.scheduled}`),e.dates.start&&(n+=` \u{1F6EB} ${e.dates.start}`)),n+=` \u2795 ${window.moment().format("YYYY-MM-DD")}`,e.tags.length>0&&(n+=" "+e.tags.join(" ")),n}parseNaturalDate(e,n){let t=n||window.moment(),s=e.toLowerCase().trim();if(s==="today"||s==="tonight")return t.format("YYYY-MM-DD");if(s==="tomorrow")return t.clone().add(1,"day").format("YYYY-MM-DD");if(s==="yesterday")return t.clone().subtract(1,"day").format("YYYY-MM-DD");let a=s.match(/^next\s+(monday|tuesday|wednesday|thursday|friday|saturday|sunday|week|month|year)$/);if(a){let f=a[1];if(["monday","tuesday","wednesday","thursday","friday","saturday","sunday"].includes(f)){let h=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].indexOf(f),y=t.clone();return y.day()>=h&&y.add(1,"week"),y.day(h),y.format("YYYY-MM-DD")}if(f==="week")return t.clone().add(1,"week").format("YYYY-MM-DD");if(f==="month")return t.clone().add(1,"month").format("YYYY-MM-DD");if(f==="year")return t.clone().add(1,"year").format("YYYY-MM-DD")}let i=s.match(/^this\s+(monday|tuesday|wednesday|thursday|friday|saturday|sunday|weekend)$/);if(i){let f=i[1];if(f==="weekend")return t.clone().day(6).format("YYYY-MM-DD");let h=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].indexOf(f);return t.clone().day(h).format("YYYY-MM-DD")}let o=s.match(/^in\s+(\d+)\s+(days?|weeks?|months?)$/);if(o){let f=parseInt(o[1]),h=o[2].replace(/s$/,"");return t.clone().add(f,h).format("YYYY-MM-DD")}let d=s.match(/^(\d+)\s+(days?|weeks?|months?)\s+from\s+(now|today)$/);if(d){let f=parseInt(d[1]),h=d[2].replace(/s$/,"");return t.clone().add(f,h).format("YYYY-MM-DD")}let r=s.match(/(\d{1,2})(?:st|nd|rd|th)?\s+(january|february|march|april|may|june|july|august|september|october|november|december)(?:\s+(\d{4}))?/);if(r){let f=parseInt(r[1]),y=["january","february","march","april","may","june","july","august","september","october","november","december"].indexOf(r[2]),w=r[3]?parseInt(r[3]):t.year(),k=t.clone().year(w).month(y).date(f);return!r[3]&&k.isBefore(t,"day")&&k.add(1,"year"),k.format("YYYY-MM-DD")}let g=s.match(/(january|february|march|april|may|june|july|august|september|october|november|december)\s+(\d{1,2})(?:st|nd|rd|th)?(?:\s*,?\s*(\d{4}))?/);if(g){let f=["january","february","march","april","may","june","july","august","september","october","november","december"],h=g[1],y=parseInt(g[2]),w=g[3]?parseInt(g[3]):t.year(),k=f.indexOf(h),x=t.clone().year(w).month(k).date(y);return!g[3]&&x.isBefore(t,"day")&&x.add(1,"year"),x.format("YYYY-MM-DD")}if(s==="end of week"||s==="eow")return t.clone().endOf("week").format("YYYY-MM-DD");if(s==="end of month"||s==="eom")return t.clone().endOf("month").format("YYYY-MM-DD");if(s==="end of year"||s==="eoy")return t.clone().endOf("year").format("YYYY-MM-DD");let p=s.match(/^(monday|tuesday|wednesday|thursday|friday|saturday|sunday)$/);if(p){let f=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].indexOf(p[1]),h=t.clone().day(f);return h.isBefore(t,"day")&&h.add(1,"week"),h.format("YYYY-MM-DD")}let u=window.moment(e,["YYYY-MM-DD","MM/DD/YYYY","DD/MM/YYYY","MMM DD, YYYY","MMMM DD, YYYY"],!0);return u.isValid()?u.format("YYYY-MM-DD"):null}async getAndEnsureFolder(e){let n=e.trim();if(!n)return"";if(e.includes("{notebook}")||(n=n.replace(/YYYY/g,window.moment().format("YYYY")).replace(/MM/g,window.moment().format("MM")).replace(/DD/g,window.moment().format("DD"))),!await this.app.vault.adapter.exists(n))try{await this.app.vault.createFolder(n)}catch(t){return new m.Notice(`Error creating folder: ${n}.`),console.error("Error creating folder:",t),""}return n}parseDetectedTags(e){if(!e)return[];let n=/### Detected Tags\s*\n(.*?)(?:\n###|$)/s,t=e.match(n);return t&&t[1]&&t[1].toLowerCase().trim()!=="none identified."?t[1].split(",").map(s=>s.trim()).filter(s=>s):[]}async updateNoteProperties(e,n,t=[],s,a,i){let o=new Date().getFullYear(),d=this.settings.customTags.split(",").map(g=>g.trim()).filter(g=>g),r=a?this.settings.notebooks.find(g=>g.id===a):null;await this.app.fileManager.processFrontMatter(n,g=>{g.tags=g.tags||[],Array.isArray(g.tags)||(g.tags=[g.tags]);let p=[`notes${o}`,...d,...t];s&&p.push(s),r&&p.push(`notebook-${r.name.toLowerCase().replace(/\s+/g,"-")}`);for(let u of p)u&&!g.tags.includes(u)&&g.tags.push(u);g.image=e.name,g.created=window.moment().format("YYYY-MM-DD"),r&&(g.notebook=r.name,g.notebook_id=r.id,i&&(g.page=i))})}processExtractedTasks(e){if(!e||e.toLowerCase().trim()==="none identified.")return"None identified.";console.log("Processing tasks section:",e);let n=e.split(`
`),t=[],s=window.moment().format("YYYY-MM-DD"),a="";this.settings.defaultTaskTags&&(a=" "+this.settings.defaultTaskTags.split(",").map(o=>{let d=o.trim();return d.startsWith("#")?d:"#"+d}).join(" "));for(let i of n){let o=i.trim();if(!o)continue;console.log("Processing task line:",o);let d=o.match(/^-\s*\[\s*\]\s*(.+)/),r="";if(d?r=d[1]:o.startsWith("-")||o.startsWith("*")?r=o.replace(/^[-*]\s*/,"").trim():!o.startsWith("#")&&o.length>0&&(r=o),r){let g="",p={};r.match(/^!!!|^HIGH:/i)?(g="\u23EB ",r=r.replace(/^(!!!|HIGH:)/i,"").trim()):r.match(/^!!|^MEDIUM:/i)?(g="\u{1F53C} ",r=r.replace(/^(!!|MEDIUM:)/i,"").trim()):r.match(/^!|^LOW:/i)&&(g="\u{1F53D} ",r=r.replace(/^(!|LOW:)/i,"").trim());let u=r.match(/\bDUE:\s*([^,\s]+(?:\s+[^,\s]+)*?)(?=\s*(?:SCHEDULED:|START:|$))/i);if(u){let k=this.parseNaturalDate(u[1]);k&&(p.due=k,r=r.replace(u[0],"").trim())}let f=r.match(/\bSCHEDULED:\s*([^,\s]+(?:\s+[^,\s]+)*?)(?=\s*(?:DUE:|START:|$))/i);if(f){let k=this.parseNaturalDate(f[1]);k&&(p.scheduled=k,r=r.replace(f[0],"").trim())}let h=r.match(/\bSTART:\s*([^,\s]+(?:\s+[^,\s]+)*?)(?=\s*(?:DUE:|SCHEDULED:|$))/i);if(h){let k=this.parseNaturalDate(h[1]);k&&(p.start=k,r=r.replace(h[0],"").trim())}let y=r.match(/\bby\s+(tonight|tomorrow|today|monday|tuesday|wednesday|thursday|friday|saturday|sunday|next\s+\w+|\d{1,2}(?:st|nd|rd|th)?\s+\w+(?:\s+\d{4})?|[\w\s]+?)(?=\s*$|[,.])/i);if(y&&!p.due){let k=this.parseNaturalDate(y[1]);k&&(p.due=k,r=r.replace(y[0],"").trim())}let w=`- [ ] ${g}${r}`;p.due&&(w+=` \u{1F4C5} ${p.due}`),p.scheduled&&(w+=` \u23F3 ${p.scheduled}`),p.start&&(w+=` \u{1F6EB} ${p.start}`),w+=` \u2795 ${s}`,w+=a,console.log("Formatted task:",w),t.push(w)}}return t.join(`
`)}async callGeminiAPI(e){var d,r,g,p;let n=this.settings.geminiApiKey,s=`https://generativelanguage.googleapis.com/v1beta/models/${this.settings.selectedModel}:generateContent?key=${n}`,a=Q(e),i=this.settings.geminiPrompt;this.settings.enableDeepResearch&&(i+=`
				
### Deep Research
[Also, identify any product names, technologies, or key concepts mentioned in the note. For each item, provide a brief, one-sentence description and a relevant URL (like an official website or Wikipedia page) for more information. Format each item as a bullet point. If none are found, write "None identified."]`);let o={contents:[{parts:[{text:i},{inline_data:{mime_type:"image/jpeg",data:a}}]}]};try{let f=(await(0,m.requestUrl)({url:s,method:"POST",contentType:"application/json",body:JSON.stringify(o)})).json;if(f.candidates&&((p=(g=(r=(d=f.candidates[0])==null?void 0:d.content)==null?void 0:r.parts)==null?void 0:g[0])!=null&&p.text)){let h=f.candidates[0].content.parts[0].text,y=/### Tasks\s*\n([\s\S]*?)(?=\n###|$)/,w=h.match(y);if(w&&w[1]){console.log("Found Tasks section, processing...");let k=this.processExtractedTasks(w[1]);h=h.replace(w[0],`### Tasks
${k}`)}else{let k=/### TODOs?\s*\n([\s\S]*?)(?=\n###|$)/,x=h.match(k);if(x&&x[1]){console.log("Found old TODOs section, converting to Tasks...");let b=this.processExtractedTasks(x[1]);h=h.replace(x[0],`### Tasks
${b}`);let B=/### Next Actions\s*\n[\s\S]*?(?=\n###|$)/;h=h.replace(B,"")}}return h}else throw new Error("Unexpected response structure from Gemini API")}catch(u){throw console.error("Gemini API call failed:",u),u}}detectTriggerWords(e){let n=[],t=/(?:<u>([\w\s]+)<\/u>|__([\w\s]+)__)\s*:?\s*([\s\S]*?)(?=(?:<u>|__|\n\n|$))/gi,s;for(;(s=t.exec(e))!==null;){let a=(s[1]||s[2]).trim(),i=s[3].trim(),o=a.match(/^Translate\s+(?:to|into)\s+(\w+)$/i);if(o){let g=o[1],p=this.settings.triggerActions.find(u=>u.action==="translate"&&u.enabled);p&&n.push({trigger:`Translate to ${g}`,content:i,action:{...p,keyword:`Translate to ${g}`}});continue}let d=a.split(/\s+/)[0],r=this.settings.triggerActions.find(g=>g.keyword.toLowerCase()===d.toLowerCase()&&g.enabled);r&&n.push({trigger:d,content:i,action:r})}return n}async processTriggerWithGemini(e){var d,r,g,p;let n={brief:"Provide a concise response, 2-3 sentences per item.",moderate:"Provide a balanced response, 1-2 paragraphs per item.",detailed:"Provide a comprehensive response with full explanations, examples, and context."},t="";if(e.action.action==="translate"){let u=e.trigger.match(/Translate\s+(?:to|into)\s+(\w+)/i);u&&(t=u[1])}let a={research:`Research the following topics and provide ${n[this.settings.researchResponseLength]} Format as a numbered list matching the input:
${e.content}`,expand:`Take this brief note or concept and expand it into detailed, well-structured paragraphs: 
${e.content}
${n[this.settings.researchResponseLength]}`,summarize:`Create a concise summary of the following content. Include key points and takeaways:
${e.content}`,actions:`Extract all action items from this content and create a prioritized task list with suggested deadlines:
${e.content}`,tasks:`Format the following as a task list:
${e.content}`,analyze:`Provide a critical analysis of the following. Include pros/cons, potential risks, and opportunities:
${e.content}`,define:`Provide clear definitions with examples for these terms:
${e.content}`,translate:t?`Translate the following content to ${t}. Provide only the translation, maintaining the same format and structure as the original:
${e.content}`:`Translate the following content. Target language is specified first, then the content:
${e.content}`,rewrite:`Rewrite the following content in the specified style (formal/casual/technical/email/etc):
${e.content}`,questions:`Generate thought-provoking questions about this topic to encourage deeper thinking:
${e.content}`,connect:`Identify connections to other concepts, related topics, and interdisciplinary links for:
${e.content}`,organize:`Organize the following content into a clear, logical structure with categories and priorities:
${e.content}`,taglinks:"Finding related notes by tags...",related:"Finding related notes by tags..."}[e.action.action]||`Process: ${e.content}`,i=`https://generativelanguage.googleapis.com/v1beta/models/${this.settings.selectedModel}:generateContent?key=${this.settings.geminiApiKey}`,o={contents:[{parts:[{text:a}]}]};try{let f=(await(0,m.requestUrl)({url:i,method:"POST",contentType:"application/json",body:JSON.stringify(o)})).json;if(f.candidates&&((p=(g=(r=(d=f.candidates[0])==null?void 0:d.content)==null?void 0:r.parts)==null?void 0:g[0])!=null&&p.text))return`### ${e.trigger} Results
${f.candidates[0].content.parts[0].text}`}catch(u){return console.error(`Failed to process trigger "${e.trigger}":`,u),`### ${e.trigger} - Processing Failed
Could not process this trigger action.`}return""}},L=class extends m.PluginSettingTab{constructor(e,n){super(e,n);this.plugin=n}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Gemini Note Processor Settings"});let n=e.createDiv({cls:"setting-item"});n.style.cssText="padding: 20px; background: var(--background-modifier-hover); border-radius: 8px; margin-bottom: 20px; text-align: center;",n.createEl("p",{text:"If you find this plugin helpful, consider supporting its development!",cls:"setting-item-description"});let s=n.createEl("a",{href:"https://buymeacoffee.com/farsonic",attr:{target:"_blank"}}).createEl("img",{attr:{src:"https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png",alt:"Buy Me A Coffee"}});if(s.style.cssText="height: 60px; width: 217px; margin-top: 10px;",n.createEl("p",{text:"\u2615 Your support helps keep this plugin maintained and improved!",cls:"setting-item-description"}),new m.Setting(e).setName("Gemini API Key").setDesc("Your Google AI Studio API key for Gemini").addText(a=>a.setPlaceholder("Enter your API key").setValue(this.plugin.settings.geminiApiKey).onChange(async i=>{this.plugin.settings.geminiApiKey=i,await this.plugin.saveSettings()})),e.createEl("h2",{text:"Prompt Configuration"}),new m.Setting(e).setName("Gemini Prompt").setDesc("Edit the prompt that tells Gemini how to process your notes (be careful with changes)").addTextArea(a=>{let i="You are an expert note-processing assistant integrated into Obsidian. I am providing you with an image of a handwritten note.",o=this.plugin.settings.geminiPrompt||i;return a.setValue(o),a.inputEl.style.width="100%",a.inputEl.style.height="300px",a.inputEl.style.fontSize="11px",a.inputEl.style.fontFamily="monospace",a.onChange(async d=>{this.plugin.settings.geminiPrompt=d,await this.plugin.saveSettings()}),a}),new m.Setting(e).setName("Test Prompt Settings").setDesc("Click to test if prompt settings are working").addButton(a=>a.setButtonText("Test").onClick(()=>{var i;new m.Notice(`Prompt length: ${((i=this.plugin.settings.geminiPrompt)==null?void 0:i.length)||0} characters`)})),new m.Setting(e).setName("Reset Prompt").setDesc("Reset the prompt to the default template").addButton(a=>a.setButtonText("Reset to Default").onClick(async()=>{this.plugin.settings.geminiPrompt=`You are an expert note-processing assistant integrated into Obsidian. I am providing you with an image of a handwritten note. 
Perform the following tasks and format your response *exactly* as specified below, using Markdown. 
Do not include any other text, headers, or pleasantries in your response.

IMPORTANT: When transcribing, preserve formatting indicators:
- If a word appears underlined in the handwriting, format it as <u>word</u>
- Maintain numbered or bulleted lists exactly as they appear
- Keep the exact structure and organization of the original note

### Transcript
[Provide a full, verbatim transcript of the text in the image here, preserving all formatting indicators as specified above.]

### Summary
[Provide a concise bullet-point summary of the key points.]

### Tasks
[Extract any actionable tasks or to-do items from the note. Format each as a checkbox item using "- [ ]" followed by the task description. 
Include any time indicators mentioned with the task:
- If a due date is mentioned (e.g., "by Friday", "due tomorrow", "by tonight", "before June 1"), include it as "DUE: [date]"
- If a scheduled/planned date is mentioned (e.g., "scheduled for Monday", "on the 15th"), include it as "SCHEDULED: [date]"
- If a start date is mentioned (e.g., "start next week", "begin in January"), include it as "START: [date]"
- If priority is indicated (!, !!, !!!), include it at the beginning
Example format: "- [ ] !!! Task description DUE: tomorrow SCHEDULED: Monday"
If no tasks are found, write "None identified."]

### Detected Tags
[Identify any hashtags (e.g., #idea, #meeting) in the text. List them here as a comma-separated list, without the '#' symbol. For example: idea, meeting, project-alpha. If none are found, write "None identified."]`,await this.plugin.saveSettings(),this.display()})),e.createEl("h2",{text:"Notebook Management"}),new m.Setting(e).setName("Group Notes by Notebook").setDesc("Organize captured notes into notebook-specific folders").addToggle(a=>a.setValue(this.plugin.settings.groupByNotebook).onChange(async i=>{this.plugin.settings.groupByNotebook=i,await this.plugin.saveSettings()})),new m.Setting(e).setName("Auto-increment Page Numbers").setDesc("Automatically increment page number after each capture").addToggle(a=>a.setValue(this.plugin.settings.autoIncrementPage).onChange(async i=>{this.plugin.settings.autoIncrementPage=i,await this.plugin.saveSettings()})),new m.Setting(e).setName("Notebook Folder Pattern").setDesc("Folder structure for notebook organization. Use {notebook} for notebook name.").addText(a=>a.setPlaceholder("Notebooks/{notebook}/YYYY-MM").setValue(this.plugin.settings.notebookFolderPattern).onChange(async i=>{this.plugin.settings.notebookFolderPattern=i,await this.plugin.saveSettings()})),e.createEl("h3",{text:"Manage Notebooks"}),e.createEl("p",{text:"Add and manage your physical notebooks.",cls:"setting-item-description"}),new m.Setting(e).setName("Add New Notebook").setDesc("Create a new notebook entry").addButton(a=>a.setButtonText("Add Notebook").onClick(async()=>{let i=this.plugin.createNotebook();this.plugin.settings.notebooks.push(i),await this.plugin.saveSettings(),this.display()})),this.plugin.settings.notebooks.forEach((a,i)=>{let o=new m.Setting(e).setName(a.name).setDesc(`Status: ${a.status} | Current Page: ${a.currentPage}${a.totalPages?`/${a.totalPages}`:""}`);o.addText(d=>d.setPlaceholder("Notebook name").setValue(a.name).onChange(async r=>{a.name=r,await this.plugin.saveSettings()})),o.addText(d=>d.setPlaceholder("Page").setValue(a.currentPage.toString()).onChange(async r=>{let g=parseInt(r);!isNaN(g)&&g>0&&(a.currentPage=g,await this.plugin.saveSettings())})).setTooltip("Current page number"),o.addDropdown(d=>d.addOption("active","Active").addOption("completed","Completed").addOption("archived","Archived").setValue(a.status).onChange(async r=>{a.status=r,await this.plugin.saveSettings(),this.display()})),o.addButton(d=>d.setButtonText("Delete").setWarning().onClick(async()=>{confirm(`Delete notebook "${a.name}"? This won't delete existing notes.`)&&(this.plugin.settings.notebooks.splice(i,1),await this.plugin.saveSettings(),this.display())}))}),e.createEl("h2",{text:"File Organization"}),new m.Setting(e).setName("New Note Location").setDesc("Default folder for new notes (when not using notebooks). Supports YYYY, MM, DD placeholders.").addText(a=>a.setPlaceholder("e.g., Scans/YYYY-MM").setValue(this.plugin.settings.newNoteLocation).onChange(async i=>{this.plugin.settings.newNoteLocation=i,await this.plugin.saveSettings()})),new m.Setting(e).setName("Attachment Location").setDesc("Folder for new image attachments. Supports YYYY, MM, DD.").addText(a=>a.setPlaceholder("e.g., Scans/YYYY-MM/Attachments").setValue(this.plugin.settings.attachmentLocation).onChange(async i=>{this.plugin.settings.attachmentLocation=i,await this.plugin.saveSettings()})),new m.Setting(e).setName("Custom Tags").setDesc("Comma-separated tags to add to note properties.").addText(a=>a.setPlaceholder("e.g., sketchnote, from-notebook").setValue(this.plugin.settings.customTags).onChange(async i=>{this.plugin.settings.customTags=i,await this.plugin.saveSettings()})),e.createEl("h2",{text:"Processing Options"}),new m.Setting(e).setName("Enable Deep Research").setDesc("Gemini will also research topics found in the note.").addToggle(a=>a.setValue(this.plugin.settings.enableDeepResearch).onChange(async i=>{this.plugin.settings.enableDeepResearch=i,await this.plugin.saveSettings()})),new m.Setting(e).setName("Enable Location Tagging").setDesc("Extract location from photo EXIF data and add as a country tag.").addToggle(a=>a.setValue(this.plugin.settings.enableLocationTagging).onChange(async i=>{this.plugin.settings.enableLocationTagging=i,await this.plugin.saveSettings()})),new m.Setting(e).setName("Fallback to Current Location").setDesc("If no GPS data in photo, use your current location instead (requires location permission).").addToggle(a=>a.setValue(this.plugin.settings.fallbackToCurrentLocation).onChange(async i=>{this.plugin.settings.fallbackToCurrentLocation=i,await this.plugin.saveSettings()})),e.createEl("h2",{text:"Trigger Words"}),new m.Setting(e).setName("Enable Trigger Words").setDesc("Process underlined keywords as special triggers for additional Gemini actions").addToggle(a=>a.setValue(this.plugin.settings.enableTriggerWords).onChange(async i=>{this.plugin.settings.enableTriggerWords=i,this.display()})),this.plugin.settings.enableTriggerWords){new m.Setting(e).setName("Research Response Length").setDesc("How detailed should triggered research responses be?").addDropdown(a=>a.addOption("brief","Brief (2-3 sentences)").addOption("moderate","Moderate (1-2 paragraphs)").addOption("detailed","Detailed (comprehensive)").setValue(this.plugin.settings.researchResponseLength).onChange(async i=>{this.plugin.settings.researchResponseLength=i,await this.plugin.saveSettings()})),e.createEl("h3",{text:"Trigger Words Configuration"}),e.createEl("p",{text:"Enable/disable specific trigger words. Underline words in your handwritten notes to activate these AI-powered actions - Gemini will detect and process them automatically.",cls:"setting-item-description"});for(let a of this.plugin.settings.triggerActions){if(a.keyword==="Summarise"&&this.plugin.settings.triggerActions.find(o=>o.keyword==="Summarize")||a.keyword==="Analyse"&&this.plugin.settings.triggerActions.find(o=>o.keyword==="Analyze")||a.keyword==="Organise"&&this.plugin.settings.triggerActions.find(o=>o.keyword==="Organize"))continue;let i=this.getTriggerUsageDescription(a.keyword,a.action);new m.Setting(e).setName(a.keyword).setDesc(i).addToggle(o=>o.setValue(a.enabled).onChange(async d=>{let g={Summarize:["Summarize","Summarise"],Analyze:["Analyze","Analyse"],Organize:["Organize","Organise"]}[a.keyword]||[a.keyword];for(let p of g){let u=this.plugin.settings.triggerActions.findIndex(f=>f.keyword===p);u!==-1&&(this.plugin.settings.triggerActions[u].enabled=d)}await this.plugin.saveSettings()}))}}e.createEl("h2",{text:"Obsidian Tasks Integration"}),e.createEl("p",{text:"Integrate with Obsidian Tasks plugin to automatically add captured tasks to your task management system.",cls:"setting-item-description"}),new m.Setting(e).setName("Enable Tasks Integration").setDesc('Automatically add tasks to your Obsidian Tasks note when using the "Tasks" trigger word').addToggle(a=>a.setValue(this.plugin.settings.enableTasksIntegration).onChange(async i=>{this.plugin.settings.enableTasksIntegration=i,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.enableTasksIntegration&&(new m.Setting(e).setName("Tasks Note Path").setDesc("Path to your main tasks note (e.g., Tasks/Inbox.md)").addText(a=>a.setPlaceholder("Tasks/Inbox.md").setValue(this.plugin.settings.tasksNotePath).onChange(async i=>{this.plugin.settings.tasksNotePath=i,await this.plugin.saveSettings()})),new m.Setting(e).setName("Tasks Section Heading").setDesc("Heading under which captured tasks will be added").addText(a=>a.setPlaceholder("## Captured Tasks").setValue(this.plugin.settings.tasksSectionHeading).onChange(async i=>{this.plugin.settings.tasksSectionHeading=i,await this.plugin.saveSettings()})),new m.Setting(e).setName("Enable Priority Markers").setDesc("Detect priority markers (!, !!, !!!) and add priority emojis to tasks").addToggle(a=>a.setValue(this.plugin.settings.taskPriorities).onChange(async i=>{this.plugin.settings.taskPriorities=i,await this.plugin.saveSettings()})),new m.Setting(e).setName("Default Task Tags").setDesc("Tags to add to all captured tasks (comma-separated, # optional)").addText(a=>a.setPlaceholder("#captured, #from-paper").setValue(this.plugin.settings.defaultTaskTags).onChange(async i=>{this.plugin.settings.defaultTaskTags=i,await this.plugin.saveSettings()})),e.createEl("p",{text:'\u{1F4A1} How to use: Underline "Tasks" in your handwritten notes, then list tasks below. Use ! for priority (!!! = highest, !! = high, ! = medium).',cls:"setting-item-description"})),e.createEl("h2",{text:"Platform-Specific Settings"}),new m.Setting(e).setName("Android Camera Mode").setDesc("Choose how to capture images on Android devices").addDropdown(a=>a.addOption("ask","Ask each time").addOption("camera","Direct camera (may not work)").addOption("gallery","Gallery picker (recommended)").setValue(this.plugin.settings.androidCameraMode).onChange(async i=>{this.plugin.settings.androidCameraMode=i,await this.plugin.saveSettings()})),e.createEl("p",{text:"\u{1F4A1} Tip: If camera access fails on Android, use Gallery mode. You can take a photo with your camera app first, then select it.",cls:"setting-item-description"})}getTriggerUsageDescription(e,n){let t={Research:"Deep research on topics you list below the underlined word. Write 'Research' and underline it, then list items below.",Expand:"Expands brief notes into detailed, well-structured content. Underline 'Expand' followed by your brief notes or concept.",Summarize:"Creates concise summaries of your content. Underline 'Summarize' or 'Summarise' above the text to summarize.",Actions:"Extracts and prioritizes all action items with suggested deadlines. Underline 'Actions' above your notes to process.",Tasks:"Adds tasks to your Obsidian Tasks note with priority and tags support. Underline 'Tasks' then list items below (use ! for priority).",Analyze:"Provides critical analysis including pros, cons, risks and opportunities. Underline 'Analyze' or 'Analyse' above content to analyze.",Define:"Provides clear definitions with examples for terms listed below. Underline 'Define' then list terms underneath.",Translate:"Translates content to your specified language. Write and underline 'Translate to [Language]' above the text to translate.",Rewrite:"Rewrites content in a different style (formal, casual, email, etc.). Underline 'Rewrite' and specify the style, then provide content.",Questions:"Generates thought-provoking questions to encourage deeper thinking. Underline 'Questions' above your topic or content.",Connect:"Identifies connections to related concepts and interdisciplinary links. Underline 'Connect' above the concept to explore.",Organize:"Organizes content into clear, logical structure with categories and priorities. Underline 'Organize' or 'Organise' above content to structure.",TagLinks:"Finds and links to other notes with matching tags. Underline 'TagLinks' anywhere in your note to generate a related notes section.",Related:"Same as TagLinks - finds notes with matching tags. Underline 'Related' to discover connected notes in your vault."};return e==="Summarise"?t.Summarize:e==="Analyse"?t.Analyze:e==="Organise"?t.Organize:t[e]||"Process content"}getTriggerDescription(e){return{research:"Deep research on listed topics",expand:"Expand brief notes into detailed content",summarize:"Create concise summaries",actions:"Extract and prioritize action items",tasks:"Add tasks to Obsidian Tasks note",analyze:"Critical analysis with pros/cons",define:"Clear definitions with examples",translate:"Translate to specified language",rewrite:"Rewrite in different style",questions:"Generate thought-provoking questions",connect:"Find related concepts and connections",organize:"Organize content into logical structure",taglinks:"Find notes with matching tags",related:"Find related notes by tags"}[e]||"Process content"}};
